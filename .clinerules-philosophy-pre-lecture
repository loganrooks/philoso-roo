mode: philosophy-pre-lecture
description: "Advanced preparatory analysis framework for philosophy lectures with token optimization, counter-interpretation capabilities, and strict chronological progression"
version: "2.0.0"

capabilities:
  allowed_tools:
    - read_file
    - search_files
    - list_files
    - write_to_file
    - apply_diff
    - insert_content
    - search_and_replace
    - switch_mode
    - ask_followup_question

mode_switching:
  enabled: true
  preserve_context: true
  recommended_transitions:
    - target_mode: philosophy-class-analysis
      trigger: "post_lecture"
      context_handoff: "readings_questions_hypotheses"
    - target_mode: philosophy-secondary-lit
      trigger: "scholarly_context_needed"
      context_handoff: "reading_questions_background"
    - target_mode: philosophy-dialectical-analysis
      trigger: "dialectical_analysis_needed"
      context_handoff: "concepts_arguments_tensions"

  # Intent-based triggers for automatic mode recommendations
  intent_triggers:
    philosophy-class-analysis:
      - "analyze lecture"
      - "complete current date analysis"
      - "proceed to class analysis"
      - "analyze course materials"
    philosophy-secondary-lit:
      - "research secondary sources"
      - "find scholarly context"
      - "investigate historical background"
    philosophy-dialectical-analysis:
      - "analyze dialectical movement"
      - "examine conceptual tensions"
      - "investigate concept evolution"

workspace_compatibility:
  detection: "System detects previous architecture by folder structure"
  legacy_structures:
    v3_structure:
      - "concepts/"
      - "evidence/"
      - "analyses/"
      - "templates/"
  path_mapping:
    v3_to_v9:
      - "concepts/definitions/": "memory-bank/concepts/"
      - "concepts/evolution/": "memory-bank/concept-evolution/"
      - "evidence/readings/": "sources/readings/"
      - "evidence/lectures/": "sources/lectures/"
      - "evidence/secondary/": "sources/secondary/"
      - "analyses/pre_lecture/": "analyses/pre_lecture/"
      - "analyses/class/": "analyses/class/"

workspace_inspection:
  enabled: true
  initialization_checks:
    - name: detect_workspace_initialization
      description: "Detect first-time workspace setup and enforce starting at beginning"
      implementation: |
        1. Check for existence of core directory structure
        2. Check if chronological_index.md exists
        3. If directories missing or index missing, flag as "fresh workspace"
        4. For fresh workspace:
           - Extract earliest course date from syllabus if available
           - Otherwise, prompt user for earliest lecture date
           - FORCE set CURRENT_TARGET_DATE to earliest course date
           - Block any attempt to start with later date
        5. Create clear initialization report with date enforcement explanation
      completion_behavior: |
        1. For fresh workspace, report: "Initializing new workspace with first lecture date: [FIRST_DATE]"
        2. Block any attempt to initialize with later date
        3. Require explicit confirmation of starting at beginning
    
    - name: scan_existing_analyses
      implementation: |
        1. Check if analysis_logs directory exists; create if not
        2. Check if chronological_index.md exists; create if not
        3. Use list_files to scan directories for date-specific analysis files
        4. For each required date, check for matching [DATE]_analysis.md files
        5. Extract syllabus schedule if available to build date index
        6. Update chronological_index.md with accurate completion status
        7. Verify all cycles are completed chronologically
        8. Flag any incomplete cycles for resolution
      completion_behavior: |
        1. If new workspace: "Starting with earliest lecture date"
        2. If existing workspace with incomplete cycles:
           - Report earliest incomplete date as target
           - Identify specific incomplete components
        3. If prerequisites missing, report dependencies
    
    - name: verify_date_consistency
      implementation: |
        1. Extract target date from chronological_index.md
        2. For each loaded file, verify date in content matches target
        3. If mismatch detected:
           - Report clear error with date comparison
           - Force reload of correct date-specific files
           - Update chronological index with corrected status
      completion_behavior: |
        1. Report date verification results
        2. If inconsistency found, display clear comparison
    
    - name: check_active_context
      implementation: |
        1. Extract target date from chronological_index.md
        2. Check if active context file exists for target date
        3. If active context exists:
           - Verify context matches target date
           - Load context for continuation
        4. If no active context or mismatch:
           - Create new active context for target date
           - Initialize with default values
        5. Verify any existing active context matches target date
      completion_behavior: |
        1. If active context found: "Resuming analysis from existing active context"
        2. If not found: "Creating new active context for target date"

memory_management:
  workspace:
    root: "analysis_workspace/"
    structure:
      - prelecture/
      - lectures/
      - concepts/
      - arguments/
      - integrated/
      - analysis_logs/
        - active_contexts/
          - prelecture/
          - lectures/
          - secondary_literature/
          - dialectical/
          - essay_prep/
      - handoff/
      - memory-bank/
      - sources/
        - readings/
        - lectures/
        - secondary/
        - chunks/
      - counter-interpretations/
  context_files:
    high_priority:
      - "analysis_logs/chronological_index.md"  # ALWAYS first
      - "analysis_logs/active_contexts/prelecture/[DATE]_active_context.md"  # ALWAYS second
      - "prelecture/[DATE]_analysis.md"         # Current pre-lecture analysis
    medium_priority:
      - "concepts/terminology_index.md"         # Master terminology index
      - "concepts/index.md"                     # Shared concept tracking
      - "arguments/index.md"                    # Shared argument tracking
      - "integrated/course_overview.md"         # Cumulative conceptual development
      - "handoff/handoff_context.md"            # Reusable handoff document
      - "counter-interpretations/[DATE]_counter_interpretations.md" # Counter-interpretations
    low_priority:
      - "prelecture/archive/[OLD_DATE]_analysis.md"  # Previous analyses
  indexing:
    enabled: true
    formats:
      pre_lecture: "prelecture/[DATE]_analysis.md"  # Consolidated pre-lecture analysis
      lecture: "lectures/[DATE]_analysis.md"        # Lecture analysis (referenced for context)
      integration: "integrated/[DATE]_integration.md"  # Integration analysis
      chronological: "analysis_logs/chronological_index.md"  # Master schedule and status
      active_context: "analysis_logs/active_contexts/prelecture/[DATE]_active_context.md"
      terminology: "concepts/terminology_index.md"  # Master terminology index
      concept_definitions: "concepts/definitions/[CONCEPT_NAME].md"  # Determinate concept definitions
      counter_interpretations: "counter-interpretations/[CONCEPT]_[ID]_counter.md" # Counter interpretations

token_optimization:
  extraction_format:
    position_based: "[[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]]"
    boundary_based: "[[EXTRACT:filepath:\"start_text\"...\"end_text\"]]"
    special_values:
      - "word_startw=0: Beginning of line"
      - "word_endw=-1: End of line"

counter_interpretation_framework:
  purpose: "Identify and document alternative interpretations with evidential support"
  implementation:
    identification:
      - "Systematic search for ambiguous passages"
      - "Identification of potential alternative readings"
      - "Analysis of contradictory textual evidence"
      - "Examination of contextual ambiguities"
    analysis:
      - "Compare evidence for competing interpretations"
      - "Assess interpretative strength of alternatives"
      - "Evaluate consistency with broader textual context"
      - "Consider author's explicit statements contradicting alternatives"
    resolution:
      - "Document both primary and alternative interpretations"
      - "Provide evidential basis for preferring primary interpretation"
      - "Acknowledge legitimate interpretative ambiguities"
      - "Distinguish between strong and weak counter-interpretations"
  documentation:
    format: |
      ## Counter-Interpretation: [CONCEPT_NAME] - [INTERPRETATION_ID]
      
      ### Primary Interpretation
      [PRIMARY_INTERPRETATION]
      
      ### Supporting Evidence for Primary Interpretation
      > [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]] ([SOURCE], [PAGE/TIMESTAMP])
      
      > [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]] ([SOURCE], [PAGE/TIMESTAMP])
      
      ### Alternative Interpretation
      [ALTERNATIVE_INTERPRETATION]
      
      ### Supporting Evidence for Alternative
      > [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]] ([SOURCE], [PAGE/TIMESTAMP])
      
      ### Interpretative Analysis
      [ANALYSIS_OF_INTERPRETATIVE_CONFLICT]
      
      ### Resolution
      [RESOLUTION_WITH_EVIDENTIAL_BASIS]

conceptual_determinacy:
  negative_definition: required
  disambiguation_protocol: required
  ordinary_language_contrast: required
  
  implementation: |
    1. For each key philosophical term identified:
       a. Document direct textual evidence with quotes using extraction markers
       b. Provide explicit positive determination (what it IS)
       c. Provide explicit negative determination (what it is NOT)
       d. Contrast with ordinary language usage
       e. Distinguish from related philosophical concepts
       f. Document potential misinterpretations with explanations
       g. Update terminology index with determinations
  
  concept_template: |
    ## Term: [PHILOSOPHICAL_TERM]
    
    ### Direct Textual Evidence
    > [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]] ([SOURCE], [PAGE/TIMESTAMP])
    
    > [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]] ([SOURCE], [PAGE/TIMESTAMP])
    
    ### Positive Determination
    [EXPLICIT_DEFINITION]
    
    ### Negative Determination
    [WHAT_THE_TERM_IS_NOT]
    
    ### Distinction from Ordinary Usage
    [HOW_TERM_DIFFERS_FROM_COMMON_USAGE]
    
    ### Potential Misinterpretations
    1. [MISINTERPRETATION_1]
       - Why this is incorrect: [EXPLANATION]
       - Textual evidence against: [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]]
    
    2. [MISINTERPRETATION_2]
       - Why this is incorrect: [EXPLANATION]
       - Textual evidence against: [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]]
    
    ### Related Terms Requiring Distinction
    - [RELATED_TERM_1]: [HOW_IT_DIFFERS]
    - [RELATED_TERM_2]: [HOW_IT_DIFFERS]

evidence_standards:
  requirements:
    - "All interpretations must reference specific text sections with extraction markers"
    - "Major concepts require multiple extraction markers with proper citation"
    - "All interpretations must include confidence assessment"
    - "Complex passages require documentation of alternative readings"
    - "Key philosophical terms must be defined through both positive and negative determination"
    - "All negative determinations must be supported by direct textual evidence"
    - "Potentially ambiguous terminology must be explicitly disambiguated from ordinary usage"
    - "Interpretations must contrast the author's meaning with potential misinterpretations"
    - "Can use bullet points, just make sure that you are only removing filler words"
    - "Maintain the same level of depth, detail, and determinacy while removing filler"
  verification_workflow:
    enabled: true
    coverage_threshold: 90%
    quote_requirement_threshold: 75%
    confidence_assessment_required: true
    negative_definition_required: true
    disambiguation_required: true
    implementation: |
      1. For all analysis files:
         - Verify references are complete and specific
         - Check for required extraction markers for major points
         - Validate interpretive confidence assessments
         - Ensure alternative readings for complex passages
         - Verify each key concept includes negative determination
         - Check disambiguation of potentially ambiguous terms
         - Validate contrast between author's usage and ordinary language
         - Verify analyses is extensive, detailed, substantive, well-supported and coherent
      2. Calculate evidence coverage and quotation percentages
      3. Flag sections below threshold
      4. Block completion if evidence standards not met

analysis_tools:
  chronological_index_manager:
    tool: write_to_file
    template: |
      # Chronological Analysis Index
      
      Last updated: [TIMESTAMP]
      
      ## Current Target
      **Date:** [CURRENT_TARGET_DATE]
      **Topic:** [CURRENT_TARGET_TOPIC]
      **Current Phase:** [CURRENT_PHASE]
      
      ## Course Schedule and Cycle Status
      
      | Date | Topic | Pre-Lecture | Class Analysis | Integration | Cycle Status |
      |------|-------|-------------|---------------|------------|--------------|
      [SCHEDULE_ROWS]
      
      ## Missing Materials
      
      | Date | Missing Item | Requested | Status |
      |------|-------------|-----------|--------|
      [MISSING_MATERIALS_ROWS]
      
      ## Notes
      [NOTES]

  active_context_manager:
    tool: write_to_file
    template: |
      # Active Context: [DATE] Pre-Lecture Analysis
      Last Updated: [TIMESTAMP]
      Status: [IN_PROGRESS/PAUSED/COMPLETED]
      
      ## Current Position
      - Reading: [CURRENT_READING_TITLE]
      - Section: [CURRENT_SECTION]
      - Progress: [PERCENTAGE_COMPLETE]
      - Last Analyzed Point: [SPECIFIC_REFERENCE]
      
      ## Readings Queue
      1. [READING_1] - Status: [COMPLETE/IN_PROGRESS/PENDING]
      2. [READING_2] - Status: [COMPLETE/IN_PROGRESS/PENDING]
      3. [READING_3] - Status: [COMPLETE/IN_PROGRESS/PENDING]
      
      ## Concepts Under Analysis
      [LIST_OF_ACTIVE_CONCEPTS_WITH_CURRENT_DEFINITION_STATUS]
      
      ## Pending Determinations
      [LIST_OF_TERMS_REQUIRING_DETERMINATION]
      
      ## Counter-Interpretations Identified
      [LIST_OF_COUNTER_INTERPRETATIONS_WITH_STATUS]
      
      ## Analysis Notes
      [RUNNING_NOTES_ON_CURRENT_READING]
      
      ## Checkpoints
      - Checkpoint 1: [SECTION] - [TIMESTAMP]
      - Checkpoint 2: [SECTION] - [TIMESTAMP]

  pre_lecture_analysis:
    tool: write_to_file
    template: |
      # Pre-Lecture Analysis: [DATE]
      
      ## Status Information
      - **Date:** [DATE]
      - **Topic:** [TOPIC]
      - **Analysis Created:** [TIMESTAMP]
      - **Analysis Phase:** Pre-Lecture
      
      ## Reading Analysis
      ### Basic Information
      - **Author:** [AUTHOR]
      - **Title:** [TITLE]
      - **Assigned Sections:** [SECTIONS]
      
      ### Key Passages
      | Page/Section | Extracted Text | Analysis | Interpretive Confidence |
      |-------------|------------|----------|------------------------|
      [KEY_PASSAGES_TABLE]
      
      ### Central Concepts
      
      [For each concept, use the following format:]
      
      #### Concept: [CONCEPT_NAME]
      
      ##### Direct Textual Evidence
      > [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]] ([PAGE/SECTION])
      
      > [[EXTRACT:filepath:line_start:word_startw:line_end:word_endw]] ([PAGE/SECTION])
      
      ##### Positive Determination
      [EXPLICIT_DEFINITION]
      
      ##### Negative Determination
      [WHAT_THE_CONCEPT_IS_NOT]
      
      ##### Distinction from Ordinary Usage
      [HOW_CONCEPT_DIFFERS_FROM_COMMON_USAGE]
      
      ##### Potential Misinterpretations
      1. [MISINTERPRETATION_1]
         - Why this is incorrect: [EXPLANATION_WITH_TEXTUAL_EVIDENCE]
      
      2. [MISINTERPRETATION_2]
         - Why this is incorrect: [EXPLANATION_WITH_TEXTUAL_EVIDENCE]
      
      ##### Related Concepts
      - [RELATED_CONCEPT_1]: [HOW_IT_DIFFERS]
      - [RELATED_CONCEPT_2]: [HOW_IT_DIFFERS]
      
      ### Potential Arguments
      | Argument | Text Location | Extracted Premises/Conclusion | Reconstruction | Interpretive Issues |
      |----------|--------------|---------------------------|---------------|---------------------|
      [POTENTIAL_ARGUMENTS_TABLE]
      
      ### Counter-Interpretations
      | Concept | Primary Interpretation | Alternative Interpretation | Assessment | Resolution |
      |---------|----------------------|---------------------------|------------|------------|
      [COUNTER_INTERPRETATIONS_TABLE]
      
      ### Historical Context
      | Contextual Element | Text Evidence (Page/Section) | Interpretation |
      |--------------------|--------------------------------|---------------|
      [HISTORICAL_CONTEXT_TABLE]
      
      ### Difficult Sections
      | Page/Section | Difficult Passage | Interpretive Challenge | Possible Readings |
      |-------------|-------------------|------------------------|-------------------|
      [DIFFICULT_SECTIONS_TABLE]
      
      ## Questions for Lecture
      | Question | Text Reference | Related Passage |
      |----------|---------------|----------------|
      [QUESTIONS_TABLE]
      
      ## Conceptual Hypotheses
      | Hypothesis | Supporting Evidence (Page/Section) | Textual Basis | Confidence Level |
      |-----------|-----------------------------------|--------------|-----------------|
      [HYPOTHESES_TABLE]
      
      ## Integration with Course Themes
      | Theme | Current Text Evidence | Previous Course Reference | Interpretive Connection |
      |-------|----------------------|--------------------------|------------------------|
      [COURSE_INTEGRATION_TABLE]
      
      ## Personal Reflections
      [REFLECTIONS]

  handoff_document:
    tool: write_to_file
    template: |
      # Handoff Context: [FROM_MODE] to [TO_MODE]
      
      ## Handoff Information
      - **Date:** [DATE]
      - **Topic:** [TOPIC]
      - **From Mode:** [FROM_MODE]
      - **To Mode:** [TO_MODE]
      - **Handoff Created:** [TIMESTAMP]
      
      ## Analysis Summary
      [SUMMARY_OF_COMPLETED_ANALYSIS]
      
      ## Key Concepts
      [LIST_OF_KEY_CONCEPTS_WITH_DETERMINATIONS]
      
      ## Arguments Identified
      [LIST_OF_ARGUMENTS_IDENTIFIED]
      
      ## Counter-Interpretations
      [LIST_OF_COUNTER_INTERPRETATIONS_WITH_STATUS]
      
      ## Questions and Hypotheses
      [LIST_OF_QUESTIONS_AND_HYPOTHESES]
      
      ## Required Follow-up
      [LIST_OF_REQUIRED_FOLLOW_UP_ITEMS]
      
      ## Context Files
      [LIST_OF_RELEVANT_FILES_WITH_PATHS]

active_context_management:
  checkpoint_system:
    automatic_triggers:
      - after_section_completion
      - before_mode_switching
    
    checkpoint_process: |
      1. Save current analysis state to active context file
      2. Update progress tracking information
      3. Document completed sections
      4. Record timestamp of checkpoint
      5. Update pending determinations list
    
    resumption_protocol: |
      1. Load most recent active context file for target date
      2. Extract current position information
      3. Locate relevant source materials
      4. Resume from last analyzed point
      5. Present pending determinations requiring attention
  
  multi_reading_management:
    reading_queue_management: |
      1. Initialize ordered list of readings for target date
      2. Track completion status for each reading
      3. Prioritize readings based on complexity and dependencies
      4. Document inter-reading connections and references
      5. Maintain cross-reading concept references
    
    reading_transition_process: |
      1. Complete final checkpoint for current reading
      2. Mark current reading as complete in active context
      3. Identify next reading in queue
      4. Update active context with new reading information
      5. Initialize context for next reading
  
  implementation: |
    1. Initialize active context for target date
    2. Create checkpoints at strategic points (section boundaries, concept determinations)
    3. Update active context with progress tracking
    4. For interrupted analyses, load active context and resume from last checkpoint
    5. For multi-part readings, track progress through reading queue
    6. Document pending determinations for continuation

workflows:
  pre_analysis:
    - name: initialize_chronological_tracking
      description: "Set up and validate chronological tracking for the current analysis"
      prerequisites: []  # No prerequisites as this is an entry point
      tools:
        - read_file
        - write_to_file  # Only for initial creation
        - search_and_replace  # For updates to existing file
      file_operation_rules: |
        1. Use write_to_file ONLY if chronological_index.md doesn't exist
        2. Use search_and_replace for updating specific date entries in existing files
        3. Use insert_content for adding new dates to existing chronology
      implementation: |
        1. Check if chronological_index.md exists in analysis_logs/
        2. If not, create it using the chronological_index_manager template (write_to_file)
        3. If exists, use read_file to load current content
        4. Extract course schedule from syllabus if available
        5. For new dates:
           a. Use insert_content to add rows without rewriting entire file
        6. For status updates:
           a. Use search_and_replace to modify specific status fields
        7. Set CURRENT_TARGET_DATE based on chronological progression
        8. Use search_and_replace to update current target section
      completion_behavior: |
        1. Report "Chronological tracking initialized for [COURSE_NAME]"
        2. Display earliest incomplete date as CURRENT_TARGET_DATE
        3. Block any attempt to analyze later dates
    
    - name: identify_next_analysis_target
      description: "Determine the next lecture that requires analysis"
      prerequisites:
        - "initialize_chronological_tracking"  # Direct dependency
      tools:
        - read_file
        - search_and_replace
      file_operation_rules: |
        1. Use read_file to examine chronological_index.md
        2. Use search_and_replace for updating current target fields
        3. NEVER use write_to_file for this workflow
      implementation: |
        1. Read chronological_index.md to extract course schedule
        2. For each date in chronological order:
           a. Check if pre-lecture analysis exists and is complete
           b. Check if class analysis exists and is complete
           c. If either is missing, set as CURRENT_TARGET_DATE
           d. Check for documented exceptions (e.g., canceled lectures)
        3. Validate that no future dates are being analyzed before past dates
        4. Use search_and_replace to update only the current target section of chronological_index.md
      completion_behavior: |
        1. Report "Target date set to [CURRENT_TARGET_DATE]"
        2. If prerequisite missing, run "initialize_chronological_tracking" first
        3. Block any attempt to analyze later dates
        4. If no incomplete dates found, report "All known lectures analyzed"
    
    - name: initialize_or_resume_active_context
      description: "Create new active context or resume from existing one"
      prerequisites:
        - "identify_next_analysis_target"  # Direct dependency
        - "check_chronological_continuity"  # Enforces chronological integrity
      tools:
        - read_file
        - write_to_file  # Only for initial creation
        - search_and_replace  # For updates
        - apply_diff  # For structured updates
      file_operation_rules: |
        1. Use write_to_file ONLY for initial file creation
        2. Use search_and_replace for simple field updates (status, progress)
        3. Use apply_diff for structured updates to sections
        4. For checkpoints, use insert_content to add without rewriting
      implementation: |
        1. Check if active context file exists for CURRENT_TARGET_DATE:
           path = analysis_logs/active_contexts/prelecture/[CURRENT_TARGET_DATE]_active_context.md
        2. If exists:
           a. Load existing active context using read_file
           b. Extract current position, reading queue, concepts
           c. Validate context is for correct date
           d. Use search_and_replace to update timestamps only
        3. If not exists:
           a. Create new active context file using active_context_manager template (write_to_file)
           b. Extract readings list from syllabus or course materials
           c. Initialize reading queue with all required readings
           d. Set status to "IN_PROGRESS"
        4. Check if pre-lecture analysis file exists:
           path = prelecture/[CURRENT_TARGET_DATE]_analysis.md
        5. If not exists, create using pre_lecture_analysis template (write_to_file)
      completion_behavior: |
        1. Report "Active context [initialized/resumed] for [CURRENT_TARGET_DATE]"
        2. If prerequisites missing:
           a. Run "identify_next_analysis_target" first
           b. Then run "check_chronological_continuity"
        3. Display current reading and progress
        4. If resumed, highlight pending determinations

  prerequisite_management:
    - name: categorize_prerequisites
      description: "Distinguish between necessary and optional prerequisites"
      prerequisites:
        - "initialize_or_resume_active_context"  # Needs active context
      tools:
        - read_file
        - search_and_replace
        - insert_content
      file_operation_rules: |
        1. Use read_file for examining syllabus and prior analyses
        2. Use insert_content to add prerequisite sections to active context
        3. Use search_and_replace for updating specific fields
        4. NEVER use write_to_file for updating existing documents
      implementation: |
        1. Examine course syllabus and schedule using read_file
        2. For current target lecture:
           a. Extract required readings from syllabus
           b. Extract optional readings if specified
           c. Identify prior lectures with conceptual dependencies
        3. Check if prior lecture analyses exist using read_file:
           path = lectures/[PRIOR_DATE]_analysis.md 
        4. Extract key concepts from prior lectures
        5. Use insert_content or apply_diff to update prerequisite section in active context
      completion_behavior: |
        1. Report "Prerequisites categorized for [CURRENT_TARGET_DATE]"
        2. If prerequisite "initialize_or_resume_active_context" missing, run it first
        3. Display list of required and optional readings
        4. Highlight key concepts from prior lectures
    
    - name: integrate_previous_analysis
      description: "Incorporate insights from previous lecture's class analysis"
      prerequisites:
        - "categorize_prerequisites"  # Need to know prerequisites first
      tools:
        - read_file
        - apply_diff
        - insert_content
      file_operation_rules: |
        1. Use read_file for loading existing analyses
        2. Use insert_content to add previous insights to current analysis
        3. Use apply_diff for updating concept sections with new information
        4. NEVER rewrite entire files when partial updates suffice
      implementation: |
        1. Identify previous lecture date from chronological index using read_file
        2. Load previous lecture analysis using read_file:
           path = lectures/[PREVIOUS_DATE]_analysis.md
        3. Extract key conclusions, open questions, concept developments
        4. Identify concepts with significant development or revision
        5. For terminology index updates:
           a. Use apply_diff to update specific concept entries
        6. For current pre-lecture analysis:
           a. Use insert_content to add previous lecture insights in relevant sections
        7. For questions section:
           a. Use insert_content to add open questions from previous lecture
      completion_behavior: |
        1. Report "Previous lecture insights integrated"
        2. If prerequisite "categorize_prerequisites" missing, run it first
        3. Highlight conceptual developments from previous lecture
        4. Flag open questions for current analysis focus

  default:
    - name: check_chronological_continuity
      description: "Validate chronological continuity of analyses"
      prerequisites:
        - "initialize_chronological_tracking"  # Need chronological tracking
      tools:
        - read_file
        - search_files
      file_operation_rules: |
        1. Use read_file for examining chronological_index.md
        2. Use search_files to check for existence of analysis files
        3. This workflow performs validation only; no write operations needed
      implementation: |
        1. Read chronological_index.md using read_file
        2. For all dates before CURRENT_TARGET_DATE:
           a. Use search_files to check if analysis files exist
           b. Verify completion status or exception documentation
           c. Flag any incomplete prior cycles
        3. If incomplete cycles found:
           a. Block progress on current analysis
           b. Present option to document valid exception
           c. Otherwise, force completion of prior cycle
        4. Verify CURRENT_TARGET_DATE is earliest incomplete date
      completion_behavior: |
        1. If continuity verified: "Chronological continuity verified"
        2. If prerequisite "initialize_chronological_tracking" missing, run it first
        3. If continuity issues: "CHRONOLOGICAL VIOLATION: Complete [INCOMPLETE_DATE] first"
        4. Block progress until resolved
    
    - name: analyze_lecture_materials
      description: "Complete pre-lecture analysis in incremental, section-by-section mode"
      prerequisites:
        - "initialize_or_resume_active_context"  # Needs active context
        - "categorize_prerequisites"  # Needs materials identified
        - "check_chronological_continuity"  # Enforces proper order
      tools:
        - read_file
        - apply_diff
        - insert_content
      file_operation_rules: |
        1. Use read_file for examining readings and current analysis state
        2. Use insert_content for adding new analysis sections incrementally
        3. Use apply_diff for updating existing analysis sections
        4. Create checkpoints frequently to minimize loss from interruptions
        5. Use write_to_file ONLY for initial file creation, never for updates
      implementation: |
        1. Load active context to determine current reading position using read_file
        2. For each reading in the reading queue:
           a. Process section by section:
              i. Identify key passages
              ii. Extract central concepts
              iii. Identify arguments
              iv. Document difficult passages
           b. For each completed section:
              i. Use insert_content to add new analysis without rewriting file
              ii. Create checkpoint in active context using apply_diff
           c. For each key concept:
              i. Add textual evidence incrementally using insert_content
              ii. Build determinations section by section
           d. When reading complete:
              i. Use apply_diff to update reading status in active context
        3. For counter-interpretations:
           a. Create separate counter-interpretation files to minimize token usage
           b. Use insert_content to add references to main analysis
        4. Update terminology index using apply_diff for each concept
      completion_behavior: |
        1. Report incremental analysis progress after each section
        2. If prerequisites missing:
           a. Run missing workflow in proper order
        3. Create frequent checkpoints to minimize token loss on interruption
        4. Display coverage metrics for completed sections
    
    - name: evidence_verification_check
      description: "Verify all analyses include proper textual evidence"
      prerequisites:
        - "analyze_lecture_materials"  # Need analysis to verify
      tools:
        - read_file
        - search_files
      file_operation_rules: |
        1. Use read_file for examining analysis files
        2. Use search_files for locating evidence markers
        3. This workflow performs validation only; no write operations needed
      implementation: |
        1. Load pre-lecture analysis file using read_file:
           path = prelecture/[CURRENT_TARGET_DATE]_analysis.md
        2. Count total interpretative claims
        3. Use search_files to count claims with extraction markers
        4. Calculate evidence coverage percentage
        5. For each concept definition:
           a. Verify positive determination with evidence
           b. Verify negative determination with evidence
           c. Verify disambiguation from ordinary usage
        6. For each argument:
           a. Verify premises and conclusion with evidence
        7. Flag sections with insufficient evidence
      completion_behavior: |
        1. Report "Evidence verification: [PERCENTAGE]% coverage"
        2. If prerequisite "analyze_lecture_materials" incomplete, run it first
        3. If below threshold (75%):
           a. Block completion
           b. List sections requiring additional evidence
           c. Return to analyze_lecture_materials for specific sections
        4. If above threshold, proceed to next step
    
    - name: finalize_pre_lecture_preparation
      description: "Complete pre-lecture materials and prepare for handoff"
      prerequisites:
        - "evidence_verification_check"  # Need verification passed
        - "evaluate_conceptual_determination"  # From specialized workflows
      tools:
        - read_file
        - apply_diff
        - insert_content
        - write_to_file  # Only for handoff document creation
      file_operation_rules: |
        1. Use read_file for examining completed analysis
        2. Use apply_diff for formatting updates to tables
        3. Use insert_content for adding missing sections
        4. Use write_to_file ONLY for creating new handoff document
        5. Use search_and_replace for status updates in chronological index
      implementation: |
        1. Format all tables in pre-lecture analysis using apply_diff
        2. Verify all required sections are complete
        3. Use search_and_replace to update status in chronological_index.md
        4. Create handoff document using write_to_file:
           path = handoff/[CURRENT_TARGET_DATE]_handoff.md
        5. Extract key points for class analysis focus
        6. Use apply_diff to update active context status to "COMPLETED"
      completion_behavior: |
        1. Report "Pre-lecture analysis finalized for [CURRENT_TARGET_DATE]"
        2. If prerequisites missing:
           a. Run "evidence_verification_check" first
           b. Run "evaluate_conceptual_determination" if not complete
        3. Display completion metrics
        4. Suggest next appropriate action
    
    - name: determine_post_prelecture_path
      description: "Determine appropriate next steps after pre-lecture analysis"
      prerequisites:
        - "finalize_pre_lecture_preparation"  # Need finalized analysis
      tools:
        - read_file
      file_operation_rules: |
        1. Use read_file for examining course schedule and analysis
        2. This workflow makes recommendations only; no write operations needed
      implementation: |
        1. Check course schedule for lecture date using read_file
        2. Examine finalized analysis for specific needs:
           a. Areas requiring scholarly context
           b. Conceptual tensions identified
        3. Based on needs, recommend next appropriate mode
      completion_behavior: |
        1. Report "Recommended next step: [NEXT_STEP]"
        2. If prerequisite "finalize_pre_lecture_preparation" incomplete, run it first
        3. Display rationale for recommendation
        4. Provide command to execute recommended transition
    
    - name: handle_missing_materials
      description: "Handle cases where lecture materials are unavailable"
      prerequisites: []  # Can be triggered at any point when missing materials detected
      tools:
        - read_file
        - apply_diff
        - insert_content
      file_operation_rules: |
        1. Use read_file to examine chronological index
        2. Use apply_diff to update missing materials section
        3. Use insert_content to add exception documentation
        4. Minimize token usage by updating only affected sections
      implementation: |
        1. Read chronological_index.md using read_file
        2. For missing materials:
           a. Use apply_diff to add entry to missing materials section
           b. Document material type, requested status, and alternatives
        3. For critical material:
           a. Use insert_content to add exception documentation
        4. For non-critical:
           a. Use apply_diff to update status for proceeding with limitations
      completion_behavior: |
        1. Report "Missing materials documented"
        2. Display list of missing items and statuses
        3. Present options for proceeding or handling exception
        4. Can be called from any workflow when missing materials detected

  specialized:
    - name: verify_interpretive_rigor
      description: "Validate that all interpretations have proper textual evidence"
      prerequisites:
        - "analyze_lecture_materials"  # Need analysis to verify
      tools:
        - read_file
        - search_files
      file_operation_rules: |
        1. Use read_file for examining analysis content
        2. Use search_files for locating extraction markers and references
        3. This workflow performs validation only; no write operations needed
      implementation: |
        1. Load analysis file using read_file
        2. Extract all interpretative claims
        3. For each claim:
           a. Use search_files to verify extraction marker exists
           b. Check citation completeness
           c. Validate extraction reference exists
        4. Calculate interpretive rigor percentage
        5. Flag claims requiring additional evidence
      completion_behavior: |
        1. Report "Interpretive rigor: [PERCENTAGE]%"
        2. If prerequisite "analyze_lecture_materials" incomplete, run it first
        3. If below threshold (90%):
           a. Block completion
           b. List claims requiring evidence
           c. Return to analyze_lecture_materials for specific claims
        4. If above threshold, mark verification as passed
    
    - name: perform_chronological_context_check
      description: "Ensure analysis considers chronological development of concepts"
      prerequisites:
        - "integrate_previous_analysis"  # Need previous analysis integrated
      tools:
        - read_file
        - search_files
      file_operation_rules: |
        1. Use read_file for examining current and previous analyses
        2. Use search_files to locate concept definitions across files
        3. This workflow performs validation and identification; no write operations
      implementation: |
        1. Load current analysis using read_file
        2. Extract all concept definitions
        3. For each concept:
           a. Use search_files to check previous lectures
           b. Compare current and previous definitions
           c. Identify conceptual developments or shifts
           d. Verify explicit acknowledgment of developments
        4. Flag concepts with unacknowledged changes
      completion_behavior: |
        1. Report "Chronological context check complete"
        2. If prerequisite "integrate_previous_analysis" incomplete, run it first
        3. If issues found:
           a. List concepts requiring development documentation
           b. Return to analyze_lecture_materials for specific concepts
        4. If no issues, mark verification as passed
    
    - name: evaluate_conceptual_determination
      description: "Assess quality and completeness of concept determinations"
      prerequisites:
        - "analyze_lecture_materials"  # Need analysis with concepts
      tools:
        - read_file
        - search_files
      file_operation_rules: |
        1. Use read_file for examining concept definitions
        2. Use search_files to locate determination components
        3. This workflow performs assessment only; no write operations needed
      implementation: |
        1. Load analysis file using read_file
        2. Extract all concept definitions
        3. For each concept, use search_files to check for:
           a. Positive determination with evidence
           b. Negative determination with evidence
           c. Distinction from ordinary usage
           d. Documentation of potential misinterpretations
           e. Relation to other concepts
        4. Calculate completeness percentage for each component
        5. Flag concepts with incomplete determination
      completion_behavior: |
        1. Report "Conceptual determination assessment complete"
        2. If prerequisite "analyze_lecture_materials" incomplete, run it first
        3. Display determination metrics for each component
        4. If any below threshold (75%):
           a. Block completion
           b. List concepts requiring completion
           c. Return to analyze_lecture_materials for specific concepts
        5. If all above threshold, mark verification as passed
    
    - name: optimize_token_usage
      description: "Ensure token-efficient storage and reference of analysis content"
      prerequisites: []  # Can be run at any point to optimize
      tools:
        - read_file
        - search_and_replace
        - apply_diff
      file_operation_rules: |
        1. Use read_file to examine current content structure
        2. Use search_and_replace to convert full quotations to extraction markers
        3. Use apply_diff for targeted optimization of specific sections
        4. Never rewrite entire files just for optimization
      implementation: |
        1. Load analysis files using read_file
        2. Identify full quotations that can be converted to extraction markers
        3. Use search_and_replace to replace quotations with markers
        4. Identify redundant content across files
        5. Use apply_diff to replace with references
        6. Use apply_diff to consolidate similar analysis sections
      completion_behavior: |
        1. Report "Token optimization complete"
        2. Display token savings estimate
        3. Can be called from any workflow when token usage exceeds thresholds

error_prevention:
  detection:
    - name: detect_chronological_violations
      implementation: |
        1. Extract CURRENT_TARGET_DATE from chronological_index.md
        2. For any analysis operation:
           - Extract date from file path or content
           - Compare with CURRENT_TARGET_DATE
           - If date is after CURRENT_TARGET_DATE, flag violation
        3. Block operation if violation detected
      error_message: "CHRONOLOGICAL VIOLATION: Attempting to analyze [INCORRECT_DATE] while current target is [CURRENT_TARGET_DATE]"
    
    - name: detect_incomplete_determination
      implementation: |
        1. For each concept in analysis:
           - Verify presence of positive determination
           - Verify presence of negative determination
           - Verify presence of distinction from ordinary usage
           - Verify presence of related term distinctions
        2. Flag concepts missing any required component
      error_message: "INCOMPLETE DETERMINATION: [CONCEPT] is missing [MISSING_COMPONENTS]"
    
    - name: detect_evidence_gaps
      implementation: |
        1. For each interpretation in analysis:
           - Check for extraction marker references
           - Verify citation information present
        2. Flag interpretations without required evidence
      error_message: "EVIDENCE GAP: Interpretation at [LOCATION] lacks [MISSING_EVIDENCE]"
    
    - name: detect_ambiguous_language
      implementation: |
        1. For each key term in analysis:
           - Check for explicit disambiguation
           - Verify contrast with ordinary usage
        2. Flag terms without disambiguation
      error_message: "AMBIGUOUS TERMINOLOGY: [TERM] at [LOCATION] requires disambiguation"
  
  prevention:
    - name: enforce_date_consistency
      implementation: |
        1. For all file operations:
           - Extract target date from chronological_index.md
           - Validate date in file path matches target date
           - For content operations, verify content uses consistent date
        2. Block operations with inconsistent dates
    
    - name: enforce_evidence_requirements
      implementation: |
        1. Before completing any analysis:
           - Run evidence verification workflow
           - Calculate evidence coverage percentage
           - Verify all major claims have extraction markers
        2. Block completion if evidence threshold not met
    
    - name: enforce_completeness
      implementation: |
        1. Before completing pre-lecture analysis:
           - Check all required sections exist
           - Verify each section has appropriate content
           - Ensure all concepts have complete determination
        2. Block completion until all requirements met

  recovery:
    - name: provide_recovery_options
      implementation: |
        1. When detection identifies an issue:
           - Provide clear description of problem
           - Offer specific correction options
           - Include examples of proper implementation
        2. Guide user through correction process
    
    - name: create_recovery_checkpoints
      implementation: |
        1. Before implementing potentially risky operations:
           - Create checkpoint in active context
           - Document current state
           - Include recovery instructions
        2. If operation fails, provide recovery path

real_time_updates:
  status_reporting:
    format: |
      [MODE: Pre-Lecture][DATE: [CURRENT_TARGET_DATE]][Status: [CURRENT_STATUS]]
      Last completed: [LAST_COMPLETED_SECTION]
    frequency: high
    priority_levels:
      - critical
      - info
  
  progress_tracking:
    metrics:
      - name: evidence_coverage
        description: "Percentage of claims with proper evidence"
        calculation: "supported_claims / total_claims * 100"
      - name: concept_determinacy
        description: "Percentage of concepts with complete determination"
        calculation: "fully_determined_concepts / total_concepts * 100"
      - name: disambiguation_coverage
        description: "Percentage of terms with proper disambiguation"
        calculation: "disambiguated_terms / total_terms * 100"
    
    display_format: |
      Progress Dashboard:
      - Evidence Coverage: [EVIDENCE_COVERAGE]%
      - Concept Determinacy: [CONCEPT_DETERMINACY]%
      - [DISAMBIGUATION_COVERAGE]%
  
  completion_metrics:
    - name: required_sections
      check: "all required sections exist and have content"
      display: "[SECTION]: [STATUS]"
    
    - name: evidence_standards
      check: "all interpretations have required evidence"
      display: "Evidence standards: [STATUS]"
    
    - name: determination_standards
      check: "all concepts have complete determination"
      display: "Determination standards: [STATUS]"

handoff_protocols:
  to_class_analysis:
    preparation: |
      1. Extract CURRENT_TARGET_DATE from chronological_index.md
      2. Verify pre-lecture analysis is complete for this date
      3. Create handoff document with:
         - Reading analysis summary
         - Key concepts with determinations
         - Questions for lecture
         - Hypotheses for testing
      4. Include references to source files
      5. Document any unresolved interpretative issues
      6. REQUIRE explicit confirmation of target date understanding
    context_transfer:
      files:
        - "prelecture/[DATE]_analysis.md"
        - "concepts/terminology_index.md"
        - "arguments/index.md"
        - "counter-interpretations/[DATE]_counter_interpretations.md"
      summary_description: "Pre-lecture analysis for [DATE] completed, ready for class analysis of SAME date"
  
  to_secondary_lit:
    preparation: |
      1. Extract CURRENT_TARGET_DATE from chronological_index.md
      2. Document specific scholarly context needs
      3. Create handoff document with:
         - Current interpretative challenges
         - Specific questions for scholarly context
         - Concepts requiring scholarly background
      4. Include references to relevant primary texts
      5. REQUIRE explicit confirmation of target date understanding
    context_transfer:
      files:
        - "prelecture/[DATE]_analysis.md"
        - "concepts/terminology_index.md"
        - "arguments/index.md"
      summary_description: "Pre-lecture analysis for [DATE] requires secondary literature research"
  
  from_class_analysis:
    preparation: |
      1. Load handoff context and EXPLICITLY extract target date
      2. Verify class analysis is complete for previous date
      3. Identify next chronological date
      4. Create handoff document with:
         - Previous lecture conclusions
         - Concept evolution documentation
         - Open questions for continued exploration
      5. Include references to relevant primary texts
      6. Document any prerequisite concepts
      7. CONFIRM receipt of correct date context
    context_transfer:
      files:
        - "lectures/[PREVIOUS_DATE]_analysis.md"
        - "concepts/terminology_index.md"
        - "arguments/index.md"
      summary_description: "Class analysis for previous date completed, ready for pre-lecture of next date"

cycle_management:
  full_cycle_definition: |
    1. Pre-lecture analysis (current mode):
       - Reading analysis
       - Question formulation
    2. Class analysis (next required mode):
       - Lecture analysis
       - Integration with readings
    3. Optional components (may be included):
       - Secondary literature review
       - Essay preparation
  
  enforcement: |
    1. A complete cycle for date X consists of:
       - Completed pre-lecture analysis
       - Completed class analysis
    2. Pre-lecture analysis for date X+1 CANNOT begin until:
       - Class analysis for date X is COMPLETE
    3. All modes must enforce this progression constraint

  progression_rules: |
    1. Pre-lecture mode MUST:
       - Verify class analysis complete for all previous dates
       - Block any attempt to analyze later dates
    2. Class analysis mode MUST:
       - Only analyze lectures for which pre-lecture is complete
       - Complete analysis for current date before allowing progression
    3. Exception handling:
       - Missing materials: Document in chronological_index.md
       - Course schedule changes: Update chronological_index.md

memory_bank_implementation:
  status_prefix: "[MEMORY BANK: ACTIVE][PRE-LECTURE]"
  context_management:
    loading_priority:
      - target_date_specific
      - course_integration
    context_refresh:
      frequency: high
    memory_prompts:
      - "Remember current target date is [CURRENT_TARGET_DATE]"
      - "All concepts require both positive and negative determination"

instructions: |
  The pre-lecture analysis mode provides a framework for rigorous preparation before philosophy lectures. Follow these guidelines:
  
  1. CHRONOLOGICAL INTEGRITY:
     - Always respect the course chronology
     - Complete analysis cycles for previous dates before progressing
  
  2. TEXTUAL EVIDENCE:
     - Ground all interpretations in direct quotations using extraction markers
     - Include page/section references for all claims
    - Include page/section references for all claims
     - Provide multiple quotes for major concepts
     - Use extraction markers for all quotations

  3. CONCEPTUAL DETERMINACY:
     - Define all key philosophical terms through positive determination
     - Define all key philosophical terms through negative determination
     - Distinguish philosophical usage from ordinary language
     - Identify and address potential misinterpretations
     - Document related terms requiring distinction

  4. COUNTER-INTERPRETATION FRAMEWORK:
     - Actively identify alternative readings of complex passages
     - Document evidence for competing interpretations
     - Provide reasoned basis for preferring primary interpretation
     - Acknowledge legitimate interpretative ambiguities
     - Address strongest counter-evidence

  5. CHRONOLOGICAL CONTEXT:
     - Respect the development of concepts throughout the course
     - Reference prior course discussions when relevant
     - Track conceptual evolution across texts and lectures
     - Prepare for conceptual development in upcoming lectures

  6. ACTIVE CONTEXT MANAGEMENT:
     - Create checkpoints at strategic points in analysis
     - Document progress through reading queue
     - Identify pending conceptual determinations
     - For interrupted analyses, resume from last checkpoint

  7. TOKEN OPTIMIZATION:
     - Use extraction markers rather than full quotations
     - Follow extraction marker format precisely
     - Include proper citation information with all markers
     - Use bullet points judiciously while maintaining rigor

  8. VERIFICATION STANDARDS:
     - Ensure all interpretations have supporting evidence
     - Verify all concepts have complete determination
     - Confirm all key terms are properly disambiguated
     - Check analysis meets coverage thresholds

  9. WORKFLOW COMPLETION:
     - Complete required sections in pre-lecture template
     - Follow sequential workflow for analysis preparation
     - Verify evidence standards before finalizing
     - Prepare appropriate handoff to next mode

  10. ANALYSIS FORMAT:
      - Use tables for structured content when appropriate
      - Follow templates for concept determination
      - Include confidence assessments for interpretations
      - Document difficulties and uncertainties explicitly