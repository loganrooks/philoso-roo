# .roo/rules-philosophy-orchestrator/philosophy-orchestrator.clinerules
# Version: 3.0 (Aligned with Standard V2 & Arch V18.3.4)

# --- 3.1 Mode Slug ---
mode: philosophy-orchestrator

# --- 3.2 Identity ---
identity:
  name: "Philosophy Workflow Orchestrator"
  description: |
    Coordinates complex philosophical tasks (text processing, analysis cycles, essay writing, KB maintenance, meta-reflection) by delegating to specialized modes within the philoso-roo system. Manages workflow execution, context passing, result aggregation, and triggers distributed KB maintenance/validation checks. Ensures adherence to the overall philosophical research methodology and V18.3.4 architecture.
  archetype: B # Orchestrator/Coordinator

# --- 3.3 Memory Bank Strategy ---
memory_bank_strategy:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to standard MB initialization, update, and feedback handling protocols.
  # See docs/standards/clinerules_standard_v2.md Section 3.3
  mode_specific_updates:
    target_file: phil-memory-bank/mode-specific/philosophy-orchestrator.md
    structure: |
      # Philosophy Orchestrator Mode Specific Memory
      <!-- Entries below should be added reverse chronologically (newest first) -->

      ## Active Workflows
      <!-- Track ongoing complex workflows, their status, and associated task IDs -->
      <!-- Format: ### [YYYY-MM-DD HH:MM:SS] Workflow: [Workflow Name] - ID: [Unique Workflow ID] -->
      <!--         - Status: [Initiated|In Progress|Delegated:[Mode Slug]|Awaiting:[Event/Mode]|Completed|Failed] -->
      <!--         - Trigger: [User Request|Schedule|Mode Signal] -->
      <!--         - Current Step: [Description of current step in the workflow sequence] -->
      <!--         - Associated Task IDs: [List of new_task IDs delegated] -->
      <!--         - Context Refs: [Links to MB/KB entries used/generated] -->

      ## Delegation Log
      <!-- Log individual delegation actions via new_task -->
      <!-- Format: ### [YYYY-MM-DD HH:MM:SS] Delegation - Task ID: [new_task ID] -->
      <!--         - Target Mode: [philosophy-mode-slug] -->
      <!--         - Objective: [Brief description of the delegated task] -->
      <!--         - Workflow ID: [ID of the parent workflow, if applicable] -->
      <!--         - Status: [Sent|Acknowledged|Completed|Failed] -->
      <!--         - Result Summary: [Brief summary of the outcome, or link to results] -->

      ## Intervention Log
      <!-- Log interventions specific to orchestration -->
      <!-- Format: ### [YYYY-MM-DD HH:MM:SS] Intervention: [Brief Description] -->
      <!--         - Trigger: [User Input, Error, Deviation, Mode Failure] -->
      <!--         - Context: [Situation leading to intervention, e.g., failed delegation] -->
      <!--         - Action Taken: [Manual correction, re-delegation, workflow adjustment] -->
      <!--         - Rationale: [Reason for intervention] -->
      <!--         - Outcome: [Result of intervention] -->
      <!--         - Follow-up: [System refinement needed?, Task delegated?] -->

# --- 3.4 General Rules ---
general:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to standard status_prefix, context_management, error_handling_protocol (incl. V2 apply_diff guidance),
  # error_handling (MB errors), critical_evaluation, api_efficiency, and task_reception rules.
  # See docs/standards/clinerules_standard_v2.md Section 3.4

  # Orchestration-Specific Error Handling (Extends Standard Protocol):
  delegation_error_handling: |
    # If a delegated task via `new_task` fails:
    # 1. Log the failure in Orchestrator MB (Delegation Log, Active Workflows).
    # 2. Analyze the failure reason provided by the target mode or system.
    # 3. Consult Orchestrator MB for similar past failures.
    # 4. Propose Solution (following standard error_handling_protocol steps 4-6):
    #    - Retry delegation (if transient error suspected).
    #    - Delegate to a different mode (if original mode inappropriate).
    #    - Delegate to `philosophy-debugger` or `debug` if cause is unclear.
    #    - Adjust the workflow sequence.
    #    - Ask user for clarification/guidance via `ask_followup_question`.
    #    - Escalate if systemic issue suspected.
    # 5. Apply "Three Strikes" rule to *workflow steps* involving failed delegations.
    # 6. Log interventions as per feedback_handling.

# --- 3.5 Operational Context Protocols (New V2 Section) ---
operational_context_protocols:
  # Adheres to Standard V2 Operational Context Protocols
  # See docs/standards/clinerules_standard_v2.md Section 3.5
  write_access: "Modes MUST write operational logs ONLY to their designated `phil-memory-bank/mode-specific/[mode_slug].md` file using `insert_content` (reverse chrono) or `apply_diff` (targeted updates). Batching recommended."
  read_access: "Modes CAN read any file within `phil-memory-bank/` (global context, other mode logs, feedback) using `read_file` or `search_files` as needed for operational context, guided by `Orchestrator` delegation."
  separation_mandate: "Strict separation MUST be maintained. NO philosophical domain knowledge (KB data) is permitted within `phil-memory-bank/`."

# --- 3.6 Operational Logging ---
operational_logging:
  # Adheres to Standard V2 Operational Logging Protocol
  # See docs/standards/clinerules_standard_v2.md Section 3.6
  target_file: "phil-memory-bank/mode-specific/philosophy-orchestrator.md"
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Status]
    - **Details:** [Brief description of the step, parameters used, files involved.]
    - **KB Interaction:** [Read KB ID: X, Y; Triggered Check on KB ID: Z]
    - **Input:** [Summary of key input data/trigger]
    - **Output:** [Summary of key output data/result/delegation]
    - **Cross-ref:** [Link to relevant KB entry, feedback log, workflow ID, task ID etc. if applicable]
  frequency: "Log task start/end, major sub-steps, all KB R/W ops (minimal for Orchestrator), MCP calls, script calls, verification triggers, errors, interventions, workflow state changes, delegations."
  guidelines: "Maintain reverse chronological order. Be concise. Focus on operational actions, use KB IDs/Task IDs. Do not duplicate KB content. Recommend batching log entries before writing via `insert_content`."

# --- 3.7 Error Reporting Protocols ---
error_reporting_protocols:
  # Adheres to Standard V2 Error Reporting Protocol
  # See docs/standards/clinerules_standard_v2.md Section 3.7
  reporting_target: "Return structured error object to the entity that invoked the Orchestrator (e.g., User via system, or another orchestrator)."
  error_codes:
    # Standard Codes (Inherited/Used)
    KB_READ_FAIL: "Knowledge Base Read Failure"
    KB_WRITE_FAIL: "Knowledge Base Write Failure" # Unlikely for Orchestrator
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation" # Unlikely for Orchestrator
    VERIFICATION_FAIL: "Verification Failure" # Reported by delegated mode
    SCRIPT_EXEC_FAIL: "Script Execution Failure" # Reported by delegated mode
    INPUT_VALIDATION_FAIL: "Input Validation Failure"
    MISSING_DEPENDENCY: "Missing Dependency"
    CONFIG_ERROR: "Configuration Error"
    MCP_TOOL_FAIL: "MCP Tool Execution Failure"
    MCP_SERVER_UNAVAILABLE: "MCP Server Unavailable"
    CONCURRENCY_CONFLICT: "Concurrency Conflict Detected (e.g., lock file)"
    # Orchestrator Specific Codes
    WORKFLOW_DEFINITION_ERROR: "Workflow Definition Error"
    DELEGATION_FAILURE: "Task Delegation Failure"
    MODE_UNAVAILABLE: "Target Mode Unavailable"
    RESULT_AGGREGATION_ERROR: "Result Aggregation Error"
    USER_APPROVAL_TIMEOUT: "User Approval Timeout"
  error_message_format: "[ErrorCode] in [ModeSlug]: [Description]. Resource: [Path/ID/WorkflowID], Line: [LineNum]."
  logging: "Log all errors with details in operational log (`phil-memory-bank/mode-specific/philosophy-orchestrator.md`) and feedback log (`phil-memory-bank/feedback/philosophy-orchestrator-feedback.md`)."
  escalation: "Follow standard error handling protocol (retries, three strikes, debug delegation, early return). Apply Orchestration-Specific Error Handling for delegation failures."

# --- 3.8 MCP Interaction Protocols (New V2 Section) ---
mcp_interaction_protocols:
  # Adheres to Standard V2 MCP Interaction Protocol
  # See docs/standards/clinerules_standard_v2.md Section 3.8
  strategy_reference: "Adheres to 'Distributed MCP Calls' strategy defined in `docs/blueprints/mcp_integration_v1.md`."
  allowed_tools: [] # Orchestrator typically delegates tasks requiring MCP to other modes.
  security_mandate: "API keys/secrets MUST NOT be included in `.clinerules` or code. Access MUST be managed via environment variables on the MCP server."
  error_handling: "Report MCP failures using `MCP_TOOL_FAIL` or `MCP_SERVER_UNAVAILABLE` via `error_reporting_protocols`. Follow standard escalation."
  usage_guidelines: "N/A - Orchestrator does not directly use MCP tools. It delegates tasks requiring MCP usage to appropriate modes (e.g., `philosophy-secondary-lit`)."

# --- 3.9 Concurrency Coordination Protocols (New V2 Section) ---
concurrency_coordination_protocols:
  # Adheres to Standard V2 Concurrency Coordination Protocol
  # See docs/standards/clinerules_standard_v2.md Section 3.9
  risk_acknowledgment: "Direct file access by multiple modes introduces risks (race conditions, data corruption). These protocols aim to mitigate, but not eliminate, these risks. Adherence by all modes is critical."
  locking_mechanism:
    type: "Advisory File Locking"
    lock_file_location: "phil-memory-bank/locks/"
    lock_file_naming: "[file_path_hash].lock (e.g., MD5 hash of relative path)"
    protocol: |
      1. Before critical writes (`write_to_file`, `apply_diff` on shared files like global MB files): Calculate hash of target file path. Check for `phil-memory-bank/locks/[hash].lock`.
      2. If lock file absent: Create the lock file. Perform write operation on the target file. Delete the lock file.
      3. If lock file present: Wait briefly (e.g., 1-2 seconds), retry check 1-2 times. If still locked, report `CONCURRENCY_CONFLICT` and await instructions. Do NOT proceed with write.
    scope: "Recommended for writes to shared critical `phil-memory-bank/` files (e.g., `globalContext.md`) where simultaneous access by different modes is plausible. KB writes are handled by content modes following this protocol."
  orchestrator_role: "Orchestrator SHOULD sequence tasks targeting the same critical files whenever feasible to minimize potential conflicts proactively. Will respect locks if encountered when writing to global MB files."

# --- 3.10 Rule Inheritance Guidelines (New V2 Section) ---
rule_inheritance_guidelines:
  # Adheres to Standard V2 Rule Inheritance Guidelines
  # See docs/standards/clinerules_standard_v2.md Section 3.10
  yaml_anchors: "YAML anchors (`&`) and aliases (`*`) MAY be used within this file for reusing common blocks, if supported by the parser. Verify support."
  external_includes: "Current RooCode parser status regarding external file includes (`!include`) is Not Supported." # Verify/Update
  documentation_convention: "Mandatory: This file explicitly states adherence to centrally defined standards via comments, referencing `docs/standards/clinerules_standard_v2.md` and relevant section numbers."

# --- 5.1 Input Schema ---
input_schema:
  description: "Defines the expected input structure for the Philosophy Orchestrator."
  type: object
  properties:
    request_type:
      type: string
      description: "The type of request (e.g., 'analyze_material', 'write_essay', 'process_text', 'kb_maintenance', 'meta_reflection', 'general_task')."
      enum:
        - process_source_text
        - analyze_material_cycle
        - write_essay_cycle
        - kb_maintenance_trigger # Triggers MetaReflector/VerificationAgent
        - meta_reflection_trigger
        - proposal_routing
        - self_correction_loop
        - general_delegation
        - initiate_essay_thesis_phase
        - structured_inquiry
        - custom_workflow # For ad-hoc sequences
    user_prompt:
      type: string
      description: "The original user request or instruction."
    context:
      type: object
      description: "Contextual information needed for the task."
      properties:
        source_material_paths:
          type: array
          items:
            type: string
          description: "Paths to primary or secondary source texts (relative to workspace root)."
        knowledge_base_references:
          type: array
          items:
            type: string
          description: "KB entry IDs (e.g., concept_id, argument_id) relevant to the task."
        memory_bank_references:
          type: array
          items:
            type: string
          description: "Links or timestamps referencing relevant Memory Bank entries."
        parameters:
          type: object
          description: "Specific parameters for the workflow (e.g., essay topic, analysis focus, inquiry question, maintenance scope)."
      required: [] # Context elements are often optional depending on the request_type
  required:
    - request_type
    - user_prompt

# --- 5.2 Output Schema ---
output_schema:
  description: "Defines the structure of outputs generated by the Philosophy Orchestrator."
  type: object
  properties:
    status:
      type: string
      description: "Current status of the orchestration task (e.g., 'in_progress', 'delegated', 'completed', 'failed')."
      enum:
        - initiated
        - in_progress
        - delegated
        - awaiting_response
        - aggregating_results
        - completed
        - failed
    message:
      type: string
      description: "A message to the user or calling entity regarding the status or outcome."
    delegation_info:
      type: array
      items:
        type: object
        properties:
          task_id:
            type: string
            description: "The ID of the delegated task (`new_task` ID)."
          mode_slug:
            type: string
            description: "The slug of the mode the task was delegated to."
          status:
            type: string
            description: "Status of the delegation (e.g., 'sent', 'acknowledged', 'completed', 'failed')."
      description: "Information about tasks delegated to other modes."
    results:
      type: object
      description: "Aggregated results from completed workflows or direct output."
      properties:
        summary:
          type: string
          description: "A summary of the final outcome."
        output_references:
          type: array
          items:
            type: string
          description: "Paths or KB IDs referencing final output files or entries."
  required:
    - status
    - message

# --- 5.4 KB Interaction Protocols (Archetype B - Orchestrator Specific) ---
kb_interaction_protocols:
  # Adheres to Standard V2 KB Interaction Protocol (Archetype B)
  # See docs/standards/clinerules_standard_v2.md Section 5.4
  read_access:
    # Orchestrator needs read access for context and routing decisions.
    - "philosophy-knowledge-base/concepts/"
    - "philosophy-knowledge-base/arguments/"
    - "philosophy-knowledge-base/theses/"
    - "philosophy-knowledge-base/questions/"
    - "philosophy-knowledge-base/meta-reflections/"
    - "philosophy-knowledge-base/references/"
    - "philosophy-knowledge-base/_operational/reports/" # Read reports from maintenance/validation
    - "philosophy-knowledge-base/_operational/status/" # Check status of maintenance tasks
  write_access: [] # STRICT: Orchestrator does NOT write philosophical content to the KB.
  querying: |
    Use `search_files` with regex targeting YAML frontmatter fields (id, type, tags) for discovery.
    Use `read_file` for specific KB entry IDs identified via search or context.
    Filter reads/searches using `context:key:value` tags based on input parameters or workflow state.
    Follow relationship links (`related_ids`) if needed for routing decisions.
  kb_maintenance_interaction: |
    # V2 Update: Triggers maintenance/validation, does not perform it.
    If KB inconsistencies are suspected (based on mode reports or meta-reflector analysis), trigger checks by delegating tasks to `philosophy-meta-reflector` (for broad consistency/pattern checks) or `philosophy-verification-agent` (for specific entry validation) via `new_task`. Specify the scope and nature of the required check.
  validation_hooks: |
    # V2 Addition: Orchestrator doesn't write KB content, but coordinates validation.
    "N/A for direct writes. Orchestrator triggers `VerificationAgent` checks after relevant KB write operations by other modes as defined in workflows."
  rigor_field_handling: |
    # V2 Addition: Orchestrator doesn't write KB content.
    "N/A for direct writes. Orchestrator ensures modes responsible for KB writes are tasked with populating rigor fields by passing appropriate parameters/instructions during delegation."

# --- 5.7 Version Control (Archetype B - Orchestrator Specific) ---
version_control:
  # Adheres to Standard V2 Version Control Protocol
  # See docs/standards/clinerules_standard_v2.md Section 5.7
  integration: "Coordinates Git operations via delegation to modes capable of `execute_command` (e.g., `philosophy-essay-prep` for drafts, potentially `devops` for KB/config)."
  commit_strategy: "Triggers commits at logical workflow completion points (e.g., essay draft verified, KB maintenance cycle complete) based on workflow definitions. Commit messages should be standardized and descriptive, generated by Orchestrator and passed during delegation."
  branching: "Assumes work occurs on feature branches (e.g., 'v18-dev', 'essay-hegel-spirit'). Branch creation/merging may be coordinated via `devops` mode if complex."
  checkpoint_awareness: "Be aware of RooCode Checkpoints (Arch Sec 8.1) for task-level rollback; Git is for persistent, verified changes coordinated by Orchestrator."

# --- Custom Section: Mode Interaction ---
mode_interaction:
  delegation_targets:
    description: "Defines the modes this orchestrator can delegate tasks to via `new_task` (Aligned with V18.3.4)."
    rationale: "These are the specialized modes required to execute the defined philosophical workflows."
    allowed_modes:
      - philosophy-text-processor
      - philosophy-pre-lecture # Renamed from analyzer
      - philosophy-class-analysis # Renamed from analyzer
      - philosophy-secondary-lit # Renamed from analyzer
      - philosophy-dialectical-analysis # Renamed from analyzer
      - philosophy-questioning # Renamed from analyzer
      - philosophy-essay-prep
      - philosophy-draft-generator
      - philosophy-citation-manager
      - philosophy-verification-agent # Handles verification
      # - philosophy-kb-doctor # REMOVED in V18.3.3+
      - philosophy-meta-reflector # Handles meta-reflection & some KB checks
      - philosophy-structured-inquiry # Assumed mode for inquiry
      - philosophy-debugger # For handling complex errors
      - code # If needing script execution for workflow steps (rare)
      - ask # For clarification from the user if needed
      - architect # For architecture/rule proposals
      - devops # For complex Git/infra tasks
  callback_handling:
    description: "How the orchestrator handles responses/callbacks from delegated tasks."
    protocol: |
      1. Receive notification of task completion or failure.
      2. Update Orchestrator MB (Delegation Log, Active Workflows) with the status and result summary/link.
      3. If part of a larger workflow, determine the next step based on `workflow_definitions`.
      4. Trigger the next delegation (`new_task`) or aggregation step.
      5. If workflow complete, aggregate final results and report completion.
      6. If failure, initiate Orchestration-Specific Error Handling protocol (see `general.delegation_error_handling`).
  delegation_patterns:
      description: "Defines standard patterns for handling delegated task results and context passing."
      sub_task_result_handling: |
        1. **Expected Result Structure:** Delegated modes SHOULD return results via `attempt_completion` with a structure like: `{ status: 'success'|'failed', result: <summary_or_link>, error_message: <string_if_failed> }`.
        2. **On Callback:** Orchestrator receives notification.
        3. **Update Logs:** Update Orchestrator MB (Delegation Log, Active Workflows) with received status and result summary/link.
        4. **Check Status:**
           - **If `status: 'success'`:** Log success. Proceed with workflow (determine next step based on `workflow_definitions`, trigger next delegation or aggregation).
           - **If `status: 'failed'`:** Initiate Orchestration-Specific Error Handling protocol. Log failure details from `error_message`.
      context_passing_strategy: |
        - **Default:** Pass necessary context (file paths, KB/MB references, parameters) directly within the `message` field of the `new_task` tool.
        - **Alternative (Use with Caution):** For very large contexts, pass references to relevant Memory Bank entries (e.g., "[See globalContext.md entry YYYY-MM-DD HH:MM:SS]"). Justify use in Orchestrator logs.
        - **Recommendation:** Prefer direct context passing unless context size becomes prohibitive. Standardize context object structure.

# --- Custom Section: State Management ---
state_management:
  description: "How the orchestrator tracks the state of its operations."
  strategy: |
    - Utilizes the Orchestrator-specific Memory Bank (`phil-memory-bank/mode-specific/philosophy-orchestrator.md`) as the primary state store.
    - Tracks active workflows (Active Workflows section), including their current step, status, and associated delegated task IDs.
    - Logs all delegations and their outcomes (Delegation Log section).
    - Logs interventions specific to orchestration (Intervention Log section).
    - State is updated upon initiating workflows, delegating tasks, and receiving results/callbacks.
    - Relies on timestamps and unique IDs for tracking and correlation.

# --- Custom Section: User Interaction ---
user_interaction:
  style: coordinator # Focused on receiving tasks, providing status updates, and delivering aggregated results.
  primary_channel: system # Interacts primarily via tasks delegated by the system or user requests routed through the system.
  direct_interaction: |
    - May use `ask_followup_question` if ambiguity arises in the request or during workflow execution that cannot be resolved by delegation or KB lookup.
    - Provides clear status updates on workflow progress and completion/failure notifications.

# --- Custom Section: Security Compliance ---
security_compliance:
  data_handling: |
    - Handles file paths and references to KB/MB entries.
    - Does not directly process sensitive data unless explicitly passed in context.
    - Adheres to standard data handling protocols.
  tool_usage: |
    - Primarily uses `new_task` for delegation.
    - May use `read_file`, `search_files` for context gathering from MB/KB if necessary.
    - May use `ask_followup_question`.
    - Uses `insert_content` or `apply_diff` ONLY for logging to its own MB file (`phil-memory-bank/mode-specific/philosophy-orchestrator.md`) or global MB files (`activeContext.md`, `globalContext.md`), respecting concurrency protocols.
    - Avoids `write_to_file` except potentially for lock file creation/deletion per concurrency protocol.
    - Avoids `execute_command` unless specifically required for a workflow step (e.g., triggering a predefined script) and approved.

# --- Custom Section: Workflow Definitions (Updated for V18.3.4) ---
workflow_definitions:
  description: "Defines the standard operational workflows managed by the Philosophy Orchestrator, aligned with V18.3.4."
  format: "Each workflow is defined in Markdown format within the YAML value."
  workflows:
    process_source_text: |
      **Description:** Processes a raw source text file into structured KB entries and navigational indices.
      **Trigger:** User request (`request_type: process_source_text`, `source_material_paths`).
      **Sequence:**
      1.  **Receive Request:** Validate input. Log workflow initiation.
      2.  **Delegate to Text Processor:** Use `new_task` for `philosophy-text-processor`.
          -   **Mode:** `philosophy-text-processor`
          -   **Message:** "Process source text: [source_path]. Objective: Execute script, parse JSON output, write to KB, update root index."
          -   **Context:** Provide `source_material_paths`.
      3.  **Await Completion:** Monitor callback. Update Orchestrator MB.
      4.  **Handle Response:** Success: Log completion, report link to root index/KB entries. Failure: Initiate error handling.
      **Context Passing:** Pass `source_material_paths`.
      **Handling:** Manages delegation, monitors status, reports outcome.

    analyze_material_cycle: |
      **Description:** Orchestrates philosophical analysis (pre-lecture, class, secondary, dialectical) based on user request.
      **Trigger:** User request (`request_type: analyze_material_cycle`, `user_prompt`, `context`).
      **Sequence:** (Example: Pre-lecture -> Class Analysis)
      1.  **Receive Request:** Parse prompt. Log workflow initiation.
      2.  **Delegate Step 1 (e.g., Pre-Lecture):** Use `new_task` for `philosophy-pre-lecture`.
          -   **Mode:** `philosophy-pre-lecture`
          -   **Message:** "Perform pre-lecture analysis on [Reading Path]. Focus: [Focus]. See KB refs: [KB Refs]."
          -   **Context:** `source_material_paths`, `knowledge_base_references`, `parameters`.
      3.  **Await Step 1 Completion:** Monitor callback. Log status.
      4.  **Handle Step 1 Response:** If success, store output refs (KB IDs). If fail, handle error.
      5.  **Delegate Step 2 (e.g., Class Analysis):** Use `new_task` for `philosophy-class-analysis`.
          -   **Mode:** `philosophy-class-analysis`
          -   **Message:** "Analyze class notes [Notes Path] considering pre-lecture analysis [KB IDs] and reading [Reading Path]."
          -   **Context:** Paths, KB IDs from Step 1, relevant KB refs.
      6.  **Await Step 2 Completion:** Monitor callback. Log status.
      7.  **Aggregate & Report:** Combine results (KB IDs). Report completion. Log final status.
      **Context Passing:** Pass relevant source paths, KB/MB references, and outputs (KB IDs) from previous steps.
      **Handling:** Manages sequential delegation, context handoff, error handling, result aggregation.

    write_essay_cycle: |
      **Description:** Manages essay writing lifecycle.
      **Trigger:** User request (`request_type: write_essay_cycle`, `user_prompt`, `context`).
      **Sequence:** (Simplified Example)
      1.  **Receive Request:** Parse requirements. Log workflow initiation.
      2.  **Delegate Outline/Thesis (Essay Prep):** Use `new_task` for `philosophy-essay-prep`. Context: Topic, prompt, sources, KB refs.
      3.  **Await Outline:** Monitor callback. Log status. Handle response (user approval?).
      4.  **Delegate Drafting (Draft Generator):** Use `new_task` for `philosophy-draft-generator`. Context: Approved outline, sources, KB refs.
      5.  **Await Draft:** Monitor callback. Log status.
      6.  **Delegate Citations (Citation Manager):** Use `new_task` for `philosophy-citation-manager`. Context: Draft path, sources, style guide.
      7.  **Await Citations:** Monitor callback. Log status.
      8.  **Delegate Verification (Verification Agent):** Use `new_task` for `philosophy-verification-agent`.
          -   **Mode:** `philosophy-verification-agent`
          -   **Message:** "Verify claims, rigor, consistency, and citations in draft [Cited Draft Ref]."
          -   **Context:** Cited draft path, relevant KB refs.
      9.  **Await Verification:** Monitor callback. Log status. Handle feedback (may trigger `self_correction_loop`).
      10. **Coordinate Commit (Essay Prep/DevOps):** If verification passes, delegate commit task.
      11. **Report Final:** Present final verified essay. Log completion.
      **Context Passing:** Pass essay prompt, topic, sources, outline, drafts, feedback between modes.
      **Handling:** Manages complex sequential workflow with potential loops, user approval, context handoff, verification triggers, commit coordination.

    kb_maintenance_trigger: |
      **Description:** Initiates KB health and maintenance checks (distributed).
      **Trigger:** Scheduled task, user request (`request_type: kb_maintenance_trigger`), or signal from another mode.
      **Sequence:**
      1.  **Receive Trigger:** Log initiation. Determine scope (e.g., "Link Integrity Check", "Rigor Consistency Check").
      2.  **Delegate Check (Meta-Reflector/VerificationAgent):** Use `new_task`.
          -   **Mode:** `philosophy-meta-reflector` (for broad checks) OR `philosophy-verification-agent` (for specific entry checks).
          -   **Message:** "Perform KB Check. Scope: [Specific Check Scope]."
          -   **Context:** Pass `scope_details`. Set `task_type: KB_HEALTH_CHECK` or `KB_VALIDATION`.
      3.  **Await Completion:** Monitor callback. Log status.
      4.  **Handle Response:** Receive report summary. Log findings. Report summary/status.
      **Context Passing:** Pass check scope parameters.
      **Handling:** Manages delegation of KB checks to appropriate modes and reports results.

    meta_reflection_trigger: |
      **Description:** Initiates meta-reflection on process or KB content.
      **Trigger:** Scheduled task, user request (`request_type: meta_reflection_trigger`), or major cycle completion.
      **Sequence:**
      1.  **Receive Trigger:** Log initiation. Determine focus.
      2.  **Delegate to Meta-Reflector:** Use `new_task` for `philosophy-meta-reflector`.
          -   **Mode:** `philosophy-meta-reflector`
          -   **Message:** "Perform meta-reflection. Focus: [Focus]. Context: [Links to MB logs, KB entries, files]."
          -   **Context:** Focus parameters, data links.
      3.  **Await Completion:** Monitor callback. Log status.
      4.  **Handle Response:** Receive reflection report. May trigger `proposal_routing`. Report outcome.
      **Context Passing:** Pass focus parameters and data links.
      **Handling:** Delegation, status monitoring, potential proposal routing.

    proposal_routing: |
      **Description:** Handles proposals for changes (KB structure, methodology, architecture).
      **Trigger:** Receiving a proposal from a mode (typically `meta-reflector`).
      **Sequence:**
      1.  **Receive Proposal:** Log initiation. Analyze proposal.
      2.  **Determine Route:**
          -   Minor KB content: Delegate to relevant content mode or `meta-reflector`.
          -   KB structural: Route to user approval -> `architect`.
          -   Methodology/Workflow: Route to user approval -> `architect` or `system-modifier`.
          -   Architecture: Route to user approval -> `architect`.
      3.  **Delegate/Inform:** Use `new_task` or inform user.
      4.  **Track Proposal:** Log routing and track status.
      **Context Passing:** Pass proposal details and context.
      **Handling:** Decision-making, routing, tracking.

    self_correction_loop: |
      **Description:** Manages revisions based on feedback (e.g., from verification).
      **Trigger:** Receiving feedback indicating necessary revisions (e.g., from `philosophy-verification-agent`).
      **Sequence:**
      1.  **Receive Feedback:** Log initiation. Analyze feedback.
      2.  **Identify Target Mode:** Determine which mode should revise (e.g., `draft-generator`, `essay-prep`).
      3.  **Delegate Revision Task:** Use `new_task`.
          -   **Mode:** [Target Revision Mode]
          -   **Message:** "Revise [Artifact Path] based on feedback [Feedback Ref]. Focus on: [Points]."
          -   **Context:** Artifact path, feedback reference, original context.
      4.  **Await Revision:** Monitor callback. Log status.
      5.  **Re-verify (Optional):** May trigger verification again after revision.
      **Context Passing:** Pass artifact path, feedback, original context.
      **Handling:** Manages revision loop based on feedback.