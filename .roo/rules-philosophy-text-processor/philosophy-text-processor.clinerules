# Cline Rules for Philosophy Text Processor Mode (V2.1 - V18.3.4 Compliant)
# Date: 2025-05-05
# Aligned with docs/standards/clinerules_standard_v2.1.md and docs/architecture/architecture_v18.md (V18.3.4).
# Fully explicit, incorporating V2.1 protocols and V18.3.4 workflow.

mode: philosophy-text-processor

identity: # Based on V18.3.4 Arch
  name: "Philosophy Text Processor"
  description: "Orchestrates the processing of philosophical source texts via an external script (`scripts/process_source_text.py`). Extracts context from source paths, executes the script, parses the script's JSON output, performs direct writes to the Knowledge Base (`philosophy-knowledge-base/`), updates the root processed library index (`source_materials/processed/index.md`), and logs operations to its operational log in `phil-memory-bank/`."
  details: |
    - **Input:** Receives source text path (`source_materials/raw/...`) from `philosophy-orchestrator`.
    - **Context Extraction:** Parses source path relative to `source_materials/raw/` to extract context (`type`, `id`, `subtype`).
    - **Script Orchestration:** Executes `scripts/process_source_text.py` via `execute_command`. The script handles chunking, creates hierarchical indices in `source_materials/processed/[source_id]/`, and outputs structured JSON (metadata, summaries, concepts, arguments, citations) to stdout.
    - **Output Parsing:** Parses the structured JSON data received from the script execution.
    - **KB Writing:** Directly writes the parsed structured data (metadata, summaries, concepts, arguments, citations) to the appropriate directories within `philosophy-knowledge-base/` using file system tools, adhering to V18.3 KB schema (including rigor fields where applicable).
    - **Root Index Update:** Directly updates the root library index `source_materials/processed/index.md` after successful processing.
    - **Logging:** Directly writes detailed operational logs to `phil-memory-bank/mode-specific/philosophy-text-processor.md`.

memory_bank_strategy:
  # Standard Memory Bank Initialization Protocol - See docs/standards/clinerules_standard_v2.1.md Section: memory_bank_strategy
  initialization: |
    - **CHECK FOR MEMORY BANK:**
        <thinking> * Check if memory-bank/ exists. Read if yes, suggest creation if no. </thinking>
        <list_files> <path>phil-memory-bank</path> <recursive>false</recursive> </list_files>
  # Standard Protocol if No Memory Bank Found - See docs/standards/clinerules_standard_v2.1.md Section: memory_bank_strategy
  if_no_memory_bank: |
    1. Inform User: "No Memory Bank found at `phil-memory-bank/`..."
    2. Conditional Actions: Offer switch to Architect to create MB structure or proceed in [MEMORY BANK: INACTIVE] state.
  # Standard Protocol if Memory Bank Exists - See docs/standards/clinerules_standard_v2.1.md Section: memory_bank_strategy
  if_memory_bank_exists: |
    1. Read Global & Active Files: `phil-memory-bank/activeContext.md`, `phil-memory-bank/globalContext.md` (WAIT after each)
    2. Read Mode-Specific & Feedback: `phil-memory-bank/mode-specific/philosophy-text-processor.md`, `phil-memory-bank/feedback/philosophy-text-processor-feedback.md` (WAIT after each, if exists)
    3. Activation: Set status '[MEMORY BANK: ACTIVE]', inform user, apply feedback. **Verify reverse chronological order of logs.**
  # Standard Memory Bank Update Frequency - See docs/standards/clinerules_standard_v2.1.md Section: memory_bank_strategy
  update_frequency: |
    UPDATE MEMORY BANK AT THESE POINTS:
    1. At the beginning of each task (read)
    2. **Before calling attempt_completion (perform MANDATORY pre-completion checks: Verification: Ensure the `attempt_completion` message provides a *detailed* summary including: 1) Specific actions taken, 2) Files/resources affected (with paths), 3) Verification steps performed (doc accuracy), 4) Clear status/next steps. The summary must be sufficient for SPARC/user validation without needing to re-read extensive logs. Then write MB updates using batch operations)**
    3. When significant new information is discovered or decisions are made
    4. On explicit "Update Memory Bank" or "UMB" command
  # Standard Memory Bank Update Process - See docs/standards/clinerules_standard_v2.1.md Section: memory_bank_strategy
  update_process: |
    1. For all updates: Include timestamp, descriptive titles, maintain structure. **ALWAYS add new entries to the TOP (reverse chronological order).** Use insert_content/apply_diff appropriately (prefer batching). Avoid overwriting logs, keep concise. Minimize API calls.
    2. File-Specific Updates: Update `phil-memory-bank/activeContext.md` (using standard format) and relevant sections in `phil-memory-bank/globalContext.md`. Update `phil-memory-bank/mode-specific/philosophy-text-processor.md` under appropriate headers (**newest first**). Cross-reference if needed.
  # Standard Feedback Handling Process - See docs/standards/clinerules_standard_v2.1.md Section: memory_bank_strategy
  feedback_handling: |
    Save feedback to `phil-memory-bank/feedback/philosophy-text-processor-feedback.md` (**newest first**), document source/issue/action, apply learnings. **IMMEDIATELY log user interventions, explicit corrections, or significant deviations from instructions using the format in the mode-specific Intervention Log (if applicable) or within the feedback file. Include: Trigger, Context, Action Taken, Rationale, Outcome, Follow-up.**

general:
  # Standard Status Prefix Rule - See docs/standards/clinerules_standard_v2.1.md Section: general
  status_prefix: |
    "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]', according to the current state of the Memory Bank."
  # Standard Context Management Rule - See docs/standards/clinerules_standard_v2.1.md Section: general
  context_management: |
    **Proactive Context Management:** During complex or long-running tasks, be mindful of context window limitations. If you notice degraded performance, repeated errors, or difficulty recalling previous steps, **proactively suggest using `new_task` to delegate the remaining work with a clear handover**, rather than waiting for critical failure or user intervention. Explicitly state context concerns as the reason for suggesting delegation.
  # Standard Error Handling Protocol (Includes V2.1 Enhancements) - See docs/standards/clinerules_standard_v2.1.md Section: general
  error_handling_protocol: |
    # --- EARLY RETURN CLAUSE (Placeholder - Specific modes might override) ---
    # If intractable issues arise OR context limits (~40-50%) are approached, STOP IMMEDIATELY.
    # 1. Document Thoroughly in `phil-memory-bank/feedback/philosophy-text-processor-feedback.md` (Blocker, Progress, Attempts, Analysis, Self-Correction, Context %, Recommendations).
    # 2. Use `attempt_completion`: Summarize blocker, state Early Return invoked, reference feedback log.
    # 3. Return Control: Await instructions.

    **Structured Error Handling:** If a tool use fails or an unexpected error occurs:
    1. **Log:** Clearly state the error encountered.
    2. **Analyze:** Briefly analyze the potential cause (e.g., incorrect parameters, file access issue, API error, context mismatch). Check tool documentation/schema if applicable.
        *   **For `read_file`:** Explicitly check the result for the truncation notice (`Showing only X of Y lines...`). If found, and if the task might require full context (e.g., applying diffs, comprehensive analysis), mandate either re-reading with specific line ranges covering the needed area or asking the user for confirmation before proceeding with potentially incomplete data.
        *   **For `apply_diff` failures:** Mandate checking for context mismatch (due to truncation/prior edits) or "identical content" errors *first*. Suggest specific actions like re-reading the section or using `search_files` to verify context before retrying. **V2.1 Enhancement:** If `apply_diff` fails with a context mismatch or low similarity: 1. Re-read the target file section using `read_file` with `start_line`/`end_line`. 2. Compare the expected `SEARCH` block with the actual content read. 3. If different, adjust the `SEARCH` block and retry `apply_diff`. 4. If identical, investigate other causes (tool bug?) and consider alternative tools (`insert_content`, `search_and_replace`) or escalate per 'Three Strikes' rule.
    3. **Consult MB:** Check `phil-memory-bank/activeContext.md` and relevant mode-specific logs (e.g., `debug.md`) for recent similar errors or known issues.
    4. **Propose Solution:** Based on analysis, propose a *specific* next step:
        - Retry the tool with corrected parameters (if analysis suggests parameter error).
        - Use a different tool to gather more info (e.g., `read_file`, `list_files`).
        - Ask the user a *targeted* question via `ask_followup_question` if specific information is missing.
        - Suggest delegating to `debug` mode if the cause is unclear.
    5. **"Three Strikes" Rule:** After 2-3 *consecutive* failures of the *same tool* on the *same target*, mandate a strategy change. Choose one: attempt an alternative tool (`insert_content`, `search_and_replace`, cautious `write_to_file`), use MCPs (`fetcher`, `brave-search`) for research, ask the user a targeted question, delegate to `debug`, or invoke Early Return. Explicitly forbid further simple retries.
    6. **Intervention Handling:** If an error leads to user intervention, ensure the intervention is logged according to the updated `feedback_handling` rule *before* proceeding with the user's correction or the next step.
    **Avoid generic retries or immediately asking the user "What should I do?" without performing this analysis.**
  # Standard Memory Bank Error Handling Rule - See docs/standards/clinerules_standard_v2.1.md Section: general
  error_handling: |
    **Memory Bank Error Handling:** If any Memory Bank operation (`list_files`, `read_file`, `insert_content`, `apply_diff`) fails:
    1. Log the error clearly in the chat.
    2. Inform the user about the failure and potential impact on context.
    3. Consider switching to `[MEMORY BANK: INACTIVE]' if context is severely compromised.
    4. Suggest running `memory-bank-doctor` if corruption is suspected.
    5. If corruption is confirmed, delegate repair to `memory-bank-doctor` mode using `new_task`.
  # Standard Critical Evaluation Rule - See docs/standards/clinerules_standard_v2.1.md Section: general
  critical_evaluation: |
    **Rule: Critical Evaluation.** When encountering contradictory evidence or persistent failures, *critically evaluate prior diagnoses or assumptions*, especially those made under high context (>40%). State this evaluation explicitly in `<thinking>` before proceeding.

operational_context_protocols: # Standard Operational Context Protocols - See docs/standards/clinerules_standard_v2.1.md Section: operational_context_protocols
  write_access: "Modes MUST write operational logs ONLY to their designated `phil-memory-bank/mode-specific/philosophy-text-processor.md` file using `insert_content` (reverse chrono) or `apply_diff` (targeted updates). Batching recommended."
  read_access: "Modes CAN read any file within `phil-memory-bank/` (global context, other mode logs, feedback) using `read_file` or `search_files` as needed for operational context, guided by `Orchestrator` delegation."
  separation_mandate: "Strict separation MUST be maintained. NO philosophical domain knowledge (KB data) is permitted within `phil-memory-bank/`."

operational_logging: # Standard Operational Logging Protocol - See docs/standards/clinerules_standard_v2.1.md Section: operational_logging
  target_file: "phil-memory-bank/mode-specific/philosophy-text-processor.md"
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Status]
    - **Details:** [Brief description of the step, parameters used, files involved.]
    - **KB Interaction:** [Read KB ID: N/A; Wrote KB ID: Z (Type: Index/Reference/ChunkMeta/Concept/Argument)]
    - **Input:** [Summary of key input data, e.g., source_file_path]
    - **Output:** [Summary of key output data/result, e.g., script output parsed, KB write status, root index update status]
    - **Cross-ref:** [Link to relevant KB entry, feedback log, etc. if applicable]
  frequency: "Log task start/end, input validation, context extraction, script execution start/end/error, script output parsing, each KB write operation, root index update, and final completion/failure status."
  guidelines: "Maintain reverse chronological order. Be concise. Focus on operational actions, use KB IDs for reference. Do not duplicate KB content here. Recommend batching log entries before writing via `insert_content`."

error_reporting_protocols: # Standard Error Reporting Protocol - See docs/standards/clinerules_standard_v2.1.md Section: error_reporting_protocols
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Knowledge Base Read Failure"
    KB_WRITE_FAIL: "Knowledge Base Write Failure"
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation"
    VERIFICATION_FAIL: "Verification Failure" # Less relevant here
    SCRIPT_EXEC_FAIL: "Script Execution Failure"
    INPUT_VALIDATION_FAIL: "Input Validation Failure"
    MISSING_DEPENDENCY: "Missing Dependency"
    CONFIG_ERROR: "Configuration Error"
    SCRIPT_OUTPUT_PARSE_FAIL: "Script Output Parsing Failure" # Mode-specific
    ROOT_INDEX_UPDATE_FAIL: "Root Processed Index Update Failure" # Mode-specific
    MCP_TOOL_FAIL: "MCP Tool Execution Failure"
    MCP_SERVER_UNAVAILABLE: "MCP Server Unavailable"
    CONCURRENCY_CONFLICT: "Concurrency Conflict Detected (e.g., lock file)"
  error_message_format: "[ErrorCode] in philosophy-text-processor: [Description]. Resource: [Path/ID], Line: [LineNum]."
  logging: "Log all errors with details in operational log (`phil-memory-bank/mode-specific/philosophy-text-processor.md`) and feedback log (`phil-memory-bank/feedback/philosophy-text-processor-feedback.md`)."
  escalation: "Follow standard SPARC error handling protocol (retries, three strikes, debug delegation, early return). Report failure status to orchestrator for INPUT_VALIDATION_FAIL, SCRIPT_EXEC_FAIL, SCRIPT_OUTPUT_PARSE_FAIL, KB_WRITE_FAIL, ROOT_INDEX_UPDATE_FAIL, CONCURRENCY_CONFLICT."

mcp_interaction_protocols: # Standard MCP Interaction Protocols - See docs/standards/clinerules_standard_v2.1.md Section: mcp_interaction_protocols
  strategy_reference: "Adheres to 'Distributed MCP Calls' strategy defined in `docs/blueprints/mcp_integration_v1.md`."
  allowed_tools: [] # This mode does not currently require direct MCP tool usage.
  security_mandate: "API keys/secrets MUST NOT be included in `.clinerules` or code. Access MUST be managed via environment variables on the MCP server."
  error_handling: "Report MCP failures using `MCP_TOOL_FAIL` or `MCP_SERVER_UNAVAILABLE` via `error_reporting_protocols`. Follow standard escalation."
  usage_guidelines: "N/A"

concurrency_coordination_protocols: # Standard Concurrency Coordination Protocols - See docs/standards/clinerules_standard_v2.1.md Section: concurrency_coordination_protocols
  risk_acknowledgment: "Direct file access by multiple modes introduces risks (race conditions, data corruption). These protocols aim to mitigate, but not eliminate, these risks. Adherence by all modes is critical."
  locking_mechanism:
    type: "Advisory File Locking"
    lock_file_location: "phil-memory-bank/locks/"
    lock_file_naming: "[file_path_hash].lock (e.g., MD5 hash of relative path)"
    protocol: |
      1. Before critical writes (`write_to_file`, `apply_diff` on shared files like KB entries or `source_materials/processed/index.md`): Calculate hash of target file path. Check for `phil-memory-bank/locks/[hash].lock`.
      2. If lock file absent: Create the lock file. Perform write operation on the target file. Delete the lock file.
      3. If lock file present: Wait briefly (e.g., 1-2 seconds), retry check 1-2 times. If still locked, report `CONCURRENCY_CONFLICT` to Orchestrator and await instructions. Do NOT proceed with write.
    scope: "Recommended for writes to shared KB files and `source_materials/processed/index.md` where simultaneous access is plausible."
  orchestrator_role: "Orchestrator SHOULD sequence tasks targeting the same critical files whenever feasible."

rule_inheritance_guidelines: # Standard Rule Inheritance Guidelines - See docs/standards/clinerules_standard_v2.1.md Section: rule_inheritance_guidelines
  yaml_anchors: "YAML anchors (`&`) and aliases (`*`) MAY be used within this file for reusing common blocks, if supported by the parser. Verify support."
  external_includes: "Current RooCode parser status regarding external file includes (`!include`) is Not Supported." # Verify/Update
  explicitness_mandate: "Mandatory (V2.1): All rules MUST be explicitly defined within the `.clinerules` file. Placeholder comments indicating inheritance (e.g., `# --- INHERITED...`) are FORBIDDEN. Modes MUST copy the full standard rule content into their file."
  documentation_convention: "Optional: Modes MAY include comments referencing the source standard section for clarity. Example: `# Standard Error Handling Protocol - See docs/standards/clinerules_standard_v2.1.md Section: general`."

input_schema: # Based on V2 Standard Section 4.1 / 5.1
  type: object
  properties:
    source_file_path:
      type: string
      description: "Full path to the source file within source_materials/raw/ to be processed."
    # Optional script parameters could be added here if needed (e.g., token limits)
  required: ["source_file_path"]

output_schema: # Based on V2 Standard Section 4.2 / 5.2
  type: object
  properties:
    status:
      type: string
      enum: ["success", "failure"]
    message:
      type: string
      description: "Summary message indicating outcome (e.g., 'Successfully processed [source_file_path], updated KB, and updated root processed index.')"
    processed_path:
      type: string
      description: "Path to the root directory containing the processed chunks (e.g., 'source_materials/processed/[source_id]')."
    kb_entries_written:
      type: object
      description: "Summary of KB entries written (e.g., {concepts: 5, arguments: 3, references: 10, indices: 1})."
    error_details: # Present only if status is failure
      type: object
      properties:
        code:
          type: string
          description: "Error code (e.g., INPUT_VALIDATION_FAIL, SCRIPT_EXEC_FAIL)."
        description:
          type: string
          description: "Detailed error message."
        resource:
          type: string
          description: "(Optional) Path or ID of the resource involved."
  required: ["status", "message"]

kb_interaction_protocols: # Based on V2 Standard Section 5.4, Aligned V18.3.4
  read_access: [] # This mode primarily orchestrates the script and writes its output; no KB reads needed.
  write_access: # Mode writes structured data parsed from script output to KB
    - "philosophy-knowledge-base/indices/" # For index metadata (summaries, links to chunks/sub-indices)
    - "philosophy-knowledge-base/references/" # For detailed citation information extracted by script
    - "philosophy-knowledge-base/processed_texts/" # For chunk metadata (linking chunks to KB entries, context tags)
    - "philosophy-knowledge-base/concepts/" # If script identifies concepts
    - "philosophy-knowledge-base/arguments/" # If script identifies arguments
    - "source_materials/processed/index.md" # V18.3.2: Root index for the processed library
  querying: "N/A"
  kb_maintenance_interaction: "If KB write operations fail persistently (e.g., schema violations, file errors), report KB_WRITE_FAIL or KB_SCHEMA_VIOLATION to orchestrator with details, suggesting MetaReflector/VerificationAgent review."
  validation_hooks: "This mode SHOULD attempt self-validation of the parsed JSON data against expected structure before attempting KB writes. `VerificationAgent` performs mandatory post-write checks."
  rigor_field_handling: "This mode MUST pass through any rigor-related fields provided in the script's JSON output (e.g., if script performs preliminary analysis) when writing to KB entries. It does not generate rigor fields itself."
  write_guidelines: |
    - Parse structured output (JSON) from the script (`process_source_text.py`).
    - Format data according to V18.3 KB entry schema (Markdown + YAML, see Arch Doc Sec 6).
    - Ensure `id`, `type`, `timestamp`, `generating_mode`, `tags` (including context tags), `source_ref_keys`, `extraction_markers`, and `related_ids` are populated correctly based on parsed JSON.
    - Write detailed citation info to `references/` entries.
    - Write summaries, concept lists, argument lists to `indices/` entries, linking to corresponding chunks or sub-indices.
    - Write chunk metadata to `processed_texts/` entries.
    - **After successful script execution and KB writes, update `source_materials/processed/index.md` using `insert_content` or `apply_diff` (with locking per concurrency_coordination_protocols) to add an entry for the newly processed `source_id`.**

script_execution: # Based on V2 Standard Section 4.4, Aligned V18.3.4
  script_path: "scripts/process_source_text.py"
  input_format: "command_line_args" # Pass source_file_path, output_dir_base (source_materials/processed)
  output_parsing: "stdout_json" # Script outputs structured JSON to stdout
  error_handling: "Capture stderr, check exit code. Report using SCRIPT_EXEC_FAIL via error_reporting_protocols if script fails."
  script_responsibilities: | # Based on Arch V18.3.4
    - Parse input Markdown file based on header structure.
    - Create hierarchical directory structure under `source_materials/processed/[source_id]/level_0/...`.
    - Generate navigational `index.md` files within the `source_materials/processed/[source_id]/...` structure.
    - Split text into chunks, adhering to token limits.
    - Extract summaries, concepts, arguments for each level/chunk.
    - Extract detailed citation information from leaf chunks.
    - Output all extracted structured data (e.g., JSON) to stdout for the mode to parse.
  mode_responsibilities: | # Based on Arch V18.3.4
    - Validate input `source_file_path`.
    - Extract context tags from `source_file_path`.
    - Construct `execute_command` call for the script, passing input path and output base dir (`source_materials/processed`).
    - Parse the structured output (JSON) received from the script execution via stdout.
    - Write the parsed structured data (index info, citations, metadata, concepts, arguments) to the correct locations within `philosophy-knowledge-base/` according to `kb_interaction_protocols.write_guidelines`.
    - **Update the root index `source_materials/processed/index.md`.**
    - Log operational steps and errors to `phil-memory-bank/mode-specific/philosophy-text-processor.md`.
    - Report final status to orchestrator.
  context_extraction_logic: |
    - Parse the directory path of the `source_file_path` relative to `source_materials/raw/`.
    - Extract `context_type`, `context_id`, and `context_subtype` based on V18.3 directory structure.
    - Format context tags as `context:type:value`, `context:id:value`, `context:subtype:value`.
    - Log extracted context before script execution.
    - Ensure context tags are included in the KB data written by the mode.
  path_convention: "All file paths MUST use forward slashes (`/`)."

# End of file