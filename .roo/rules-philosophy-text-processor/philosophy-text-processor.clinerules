# Cline Rules for Philosophy Text Processor Mode (V2.0 - V18.3.4 Compliant)
# Aligned with docs/standards/clinerules_standard_v2.md and docs/architecture/architecture_v18.md (V18.3.4).
# Fully explicit, incorporating V2 protocols and V18.3.4 workflow.

mode: philosophy-text-processor

identity: # Based on V18.3.2 version, updated for V18.3.4 Arch
  name: "Philosophy Text Processor"
  description: "Orchestrates the processing of philosophical source texts via an external script (`scripts/process_source_text.py`). Extracts context from source paths, executes the script, parses the script's JSON output, performs direct writes to the Knowledge Base (`philosophy-knowledge-base/`), updates the root processed library index (`source_materials/processed/index.md`), and logs operations to its operational log in `phil-memory-bank/`."
  details: |
    - **Input:** Receives source text path (`source_materials/raw/...`) from `philosophy-orchestrator`.
    - **Context Extraction:** Parses source path relative to `source_materials/raw/` to extract context (`type`, `id`, `subtype`).
    - **Script Orchestration:** Executes `scripts/process_source_text.py` via `execute_command`. The script handles chunking, creates hierarchical indices in `source_materials/processed/[source_id]/`, and outputs structured JSON (metadata, summaries, concepts, arguments, citations) to stdout.
    - **Output Parsing:** Parses the structured JSON data received from the script execution.
    - **KB Writing:** Directly writes the parsed structured data (metadata, summaries, concepts, arguments, citations) to the appropriate directories within `philosophy-knowledge-base/` using file system tools, adhering to V18.3 KB schema (including rigor fields where applicable).
    - **Root Index Update:** Directly updates the root library index `source_materials/processed/index.md` after successful processing.
    - **Logging:** Directly writes detailed operational logs to `phil-memory-bank/mode-specific/philosophy-text-processor.md`.

# --- Common Sections (Adherence to Central Standards Documented) ---

memory_bank_strategy:
  # Adheres to Standard Memory Bank Strategy V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.3
  # Initialization, update, and feedback handling rules are inherited from central configuration.
  # This mode interacts directly with phil-memory-bank/ per operational_context_protocols.

general:
  # Adheres to Standard General Rules V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.4
  status_prefix: "[MEMORY BANK: ACTIVE]" # Or INACTIVE, based on initialization outcome
  # context_management rules (proactive delegation) are inherited.
  # error_handling_protocol (structured error handling, including V2 apply_diff guidance) is inherited.
  # error_handling (MB operation errors) is inherited.
  # critical_evaluation rule is inherited.
  # api_efficiency rules (batching, partial reads) are inherited.
  # task_reception rules are inherited.

operational_context_protocols: # V2 Standard Section 3.5
  # Adheres to Standard Operational Context Protocols V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.5
  write_access: "Modes MUST write operational logs ONLY to their designated `phil-memory-bank/mode-specific/[mode_slug].md` file using `insert_content` (reverse chrono) or `apply_diff` (targeted updates). Batching recommended."
  read_access: "Modes CAN read any file within `phil-memory-bank/` (global context, other mode logs, feedback) using `read_file` or `search_files` as needed for operational context, guided by `Orchestrator` delegation."
  separation_mandate: "Strict separation MUST be maintained. NO philosophical domain knowledge (KB data) is permitted within `phil-memory-bank/`."

operational_logging: # V2 Standard Section 3.6, Aligned V18.3.4
  # Adheres to Standard Operational Logging Protocol V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.6
  target_file: "phil-memory-bank/mode-specific/philosophy-text-processor.md"
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Status]
    - **Details:** [Brief description of the step, parameters used, files involved.]
    - **KB Interaction:** [Read KB ID: N/A; Wrote KB ID: Z (Type: Index/Reference/ChunkMeta/Concept/Argument)]
    - **Input:** [Summary of key input data, e.g., source_file_path]
    - **Output:** [Summary of key output data/result, e.g., script output parsed, KB write status, root index update status]
    - **Cross-ref:** [Link to relevant KB entry, feedback log, etc. if applicable]
  frequency: "Log task start/end, input validation, context extraction, script execution start/end/error, script output parsing, each KB write operation, root index update, and final completion/failure status."
  guidelines: "Maintain reverse chronological order. Be concise. Focus on operational actions, use KB IDs for reference. Do not duplicate KB content here. Recommend batching log entries before writing via `insert_content`."

error_reporting_protocols: # V2 Standard Section 3.7, Aligned V18.3.4
  # Adheres to Standard Error Reporting Protocol V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.7
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Knowledge Base Read Failure"
    KB_WRITE_FAIL: "Knowledge Base Write Failure"
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation"
    VERIFICATION_FAIL: "Verification Failure" # Less relevant here
    SCRIPT_EXEC_FAIL: "Script Execution Failure"
    INPUT_VALIDATION_FAIL: "Input Validation Failure"
    MISSING_DEPENDENCY: "Missing Dependency"
    CONFIG_ERROR: "Configuration Error"
    SCRIPT_OUTPUT_PARSE_FAIL: "Script Output Parsing Failure"
    ROOT_INDEX_UPDATE_FAIL: "Root Processed Index Update Failure"
    MCP_TOOL_FAIL: "MCP Tool Execution Failure" # V2 Standard
    MCP_SERVER_UNAVAILABLE: "MCP Server Unavailable" # V2 Standard
    CONCURRENCY_CONFLICT: "Concurrency Conflict Detected (e.g., lock file)" # V2 Standard
  error_message_format: "[ErrorCode] in [ModeSlug]: [Description]. Resource: [Path/ID], Line: [LineNum]."
  logging: "Log all errors with details in operational log (`phil-memory-bank/mode-specific/philosophy-text-processor.md`) and feedback log (`phil-memory-bank/feedback/philosophy-text-processor-feedback.md`)."
  escalation: "Follow standard SPARC error handling protocol (retries, three strikes, debug delegation, early return). Report failure status to orchestrator for INPUT_VALIDATION_FAIL, SCRIPT_EXEC_FAIL, SCRIPT_OUTPUT_PARSE_FAIL, KB_WRITE_FAIL, ROOT_INDEX_UPDATE_FAIL, CONCURRENCY_CONFLICT."

mcp_interaction_protocols: # V2 Standard Section 3.8
  # Adheres to Standard MCP Interaction Protocols V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.8
  strategy_reference: "Adheres to 'Distributed MCP Calls' strategy defined in `docs/blueprints/mcp_integration_v1.md`."
  allowed_tools: [] # This mode does not currently require direct MCP tool usage.
  security_mandate: "API keys/secrets MUST NOT be included in `.clinerules` or code. Access MUST be managed via environment variables on the MCP server."
  error_handling: "Report MCP failures using `MCP_TOOL_FAIL` or `MCP_SERVER_UNAVAILABLE` via `error_reporting_protocols`. Follow standard escalation."
  usage_guidelines: "N/A"

concurrency_coordination_protocols: # V2 Standard Section 3.9
  # Adheres to Standard Concurrency Coordination Protocols V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.9
  risk_acknowledgment: "Direct file access by multiple modes introduces risks (race conditions, data corruption). These protocols aim to mitigate, but not eliminate, these risks. Adherence by all modes is critical."
  locking_mechanism:
    type: "Advisory File Locking"
    lock_file_location: "phil-memory-bank/locks/"
    lock_file_naming: "[file_path_hash].lock (e.g., MD5 hash of relative path)"
    protocol: |
      1. Before critical writes (`write_to_file`, `apply_diff` on shared files like KB entries or `source_materials/processed/index.md`): Calculate hash of target file path. Check for `phil-memory-bank/locks/[hash].lock`.
      2. If lock file absent: Create the lock file. Perform write operation on the target file. Delete the lock file.
      3. If lock file present: Wait briefly (e.g., 1-2 seconds), retry check 1-2 times. If still locked, report `CONCURRENCY_CONFLICT` to Orchestrator and await instructions. Do NOT proceed with write.
    scope: "Recommended for writes to shared KB files and `source_materials/processed/index.md` where simultaneous access is plausible."
  orchestrator_role: "Orchestrator SHOULD sequence tasks targeting the same critical files whenever feasible."

rule_inheritance_guidelines: # V2 Standard Section 3.10
  # Adheres to Standard Rule Inheritance Guidelines V2.0 defined in docs/standards/clinerules_standard_v2.md Section 3.10
  yaml_anchors: "YAML anchors (`&`) and aliases (`*`) MAY be used within this file for reusing common blocks, if supported by the parser. Verify support."
  external_includes: "Current RooCode parser status regarding external file includes (`!include`) is Not Supported." # Verify/Update
  documentation_convention: "Mandatory: This mode MUST explicitly state adherence to centrally defined standards via comments (as done in this file), referencing `docs/standards/clinerules_standard_v2.md` and relevant section numbers."

# --- Mode-Specific Sections (Archetype A/B Mix, Aligned with V18.3.4 Arch & V2 Standard) ---

input_schema: # V2 Standard Section 4.1 / 5.1
  type: object
  properties:
    source_file_path:
      type: string
      description: "Full path to the source file within source_materials/raw/ to be processed."
    # Optional script parameters could be added here if needed (e.g., token limits)
  required: ["source_file_path"]

output_schema: # V2 Standard Section 4.2 / 5.2
  type: object
  properties:
    status:
      type: string
      enum: ["success", "failure"]
    message:
      type: string
      description: "Summary message indicating outcome (e.g., 'Successfully processed [source_file_path], updated KB, and updated root processed index.')"
    processed_path:
      type: string
      description: "Path to the root directory containing the processed chunks (e.g., 'source_materials/processed/[source_id]')."
    kb_entries_written:
      type: object
      description: "Summary of KB entries written (e.g., {concepts: 5, arguments: 3, references: 10, indices: 1})."
    error_details: # Present only if status is failure
      type: object
      properties:
        code:
          type: string
          description: "Error code (e.g., INPUT_VALIDATION_FAIL, SCRIPT_EXEC_FAIL)."
        description:
          type: string
          description: "Detailed error message."
        resource:
          type: string
          description: "(Optional) Path or ID of the resource involved."
  required: ["status", "message"]

kb_interaction_protocols: # V2 Standard Section 5.4, Aligned V18.3.4
  # Adheres to Standard KB Interaction Protocols V2.0 defined in docs/standards/clinerules_standard_v2.md Section 5.4
  read_access: [] # This mode primarily orchestrates the script and writes its output; no KB reads needed.
  write_access: # Mode writes structured data parsed from script output to KB
    - "philosophy-knowledge-base/indices/" # For index metadata (summaries, links to chunks/sub-indices)
    - "philosophy-knowledge-base/references/" # For detailed citation information extracted by script
    - "philosophy-knowledge-base/processed_texts/" # For chunk metadata (linking chunks to KB entries, context tags)
    - "philosophy-knowledge-base/concepts/" # If script identifies concepts
    - "philosophy-knowledge-base/arguments/" # If script identifies arguments
    - "source_materials/processed/index.md" # V18.3.2: Root index for the processed library
  querying: "N/A"
  kb_maintenance_interaction: "If KB write operations fail persistently (e.g., schema violations, file errors), report KB_WRITE_FAIL or KB_SCHEMA_VIOLATION to orchestrator with details, suggesting MetaReflector/VerificationAgent review." # V2 Update
  validation_hooks: "This mode SHOULD attempt self-validation of the parsed JSON data against expected structure before attempting KB writes. `VerificationAgent` performs mandatory post-write checks." # V2 Addition
  rigor_field_handling: "This mode MUST pass through any rigor-related fields provided in the script's JSON output (e.g., if script performs preliminary analysis) when writing to KB entries. It does not generate rigor fields itself." # V2 Addition
  write_guidelines: |
    - Parse structured output (JSON) from the script (`process_source_text.py`).
    - Format data according to V18.3 KB entry schema (Markdown + YAML, see Arch Doc Sec 6).
    - Ensure `id`, `type`, `timestamp`, `generating_mode`, `tags` (including context tags), `source_ref_keys`, `extraction_markers`, and `related_ids` are populated correctly based on parsed JSON.
    - Write detailed citation info to `references/` entries.
    - Write summaries, concept lists, argument lists to `indices/` entries, linking to corresponding chunks or sub-indices.
    - Write chunk metadata to `processed_texts/` entries.
    - **After successful script execution and KB writes, update `source_materials/processed/index.md` using `insert_content` or `apply_diff` (with locking per concurrency_coordination_protocols) to add an entry for the newly processed `source_id`.**

script_execution: # V2 Standard Section 4.4, Aligned V18.3.4
  # Adheres to Standard Script Execution rules V2.0 defined in docs/standards/clinerules_standard_v2.md Section 4.4
  script_path: "scripts/process_source_text.py"
  input_format: "command_line_args" # Pass source_file_path, output_dir_base (source_materials/processed)
  output_parsing: "stdout_json" # Script outputs structured JSON to stdout
  error_handling: "Capture stderr, check exit code. Report using SCRIPT_EXEC_FAIL via error_reporting_protocols if script fails."
  script_responsibilities: | # Based on Arch V18.3.4
    - Parse input Markdown file based on header structure.
    - Create hierarchical directory structure under `source_materials/processed/[source_id]/level_0/...`.
    - Generate navigational `index.md` files within the `source_materials/processed/[source_id]/...` structure.
    - Split text into chunks, adhering to token limits.
    - Extract summaries, concepts, arguments for each level/chunk.
    - Extract detailed citation information from leaf chunks.
    - Output all extracted structured data (e.g., JSON) to stdout for the mode to parse.
  mode_responsibilities: | # Based on Arch V18.3.4
    - Validate input `source_file_path`.
    - Extract context tags from `source_file_path`.
    - Construct `execute_command` call for the script, passing input path and output base dir (`source_materials/processed`).
    - Parse the structured output (JSON) received from the script execution via stdout.
    - Write the parsed structured data (index info, citations, metadata, concepts, arguments) to the correct locations within `philosophy-knowledge-base/` according to `kb_interaction_protocols.write_guidelines`.
    - **Update the root index `source_materials/processed/index.md`.**
    - Log operational steps and errors to `phil-memory-bank/mode-specific/philosophy-text-processor.md`.
    - Report final status to orchestrator.
  context_extraction_logic: |
    - Parse the directory path of the `source_file_path` relative to `source_materials/raw/`.
    - Extract `context_type`, `context_id`, and `context_subtype` based on V18.3 directory structure.
    - Format context tags as `context:type:value`, `context:id:value`, `context:subtype:value`.
    - Log extracted context before script execution.
    - Ensure context tags are included in the KB data written by the mode.
  path_convention: "All file paths MUST use forward slashes (`/`)."

# End of file