# Cline Rules for Philosophy Text Processor Mode (V18.3.2 Synthesized Final)
# Fully explicit, aligned with architecture_v18.md (V18.3.2) and clinerules_standard_v1.md.
# Synthesized from standard sections (current HEAD, paths corrected) and mode-specific detail (commit 04a30b3...).

mode: philosophy-text-processor

identity: # Based on 04a30b3..., updated for V18.3.2 Arch
  name: Philosophy Text Processor
  description: "Orchestrates the processing of philosophical source texts via an external script. Extracts context from source paths, executes the script, parses the script's JSON output, performs direct writes to the Knowledge Base (KB), updates the root processed library index, and logs operations."
  details: |
    - **Input:** Receives source text path (`source_materials/raw/...`) from `philosophy-orchestrator`.
    - **Context Extraction:** Parses source path relative to `source_materials/raw/` to extract context (`type`, `id`, `subtype`).
    - **Script Orchestration:** Executes `scripts/process_source_text.py` via `execute_command`. The script handles chunking, creates hierarchical indices in `source_materials/processed/[source_id]/`, and outputs structured JSON (metadata, summaries, concepts, arguments, citations) to stdout.
    - **Output Parsing:** Parses the structured JSON data received from the script execution.
    - **KB Writing:** Directly writes the parsed structured data (metadata, summaries, concepts, arguments, citations) to the appropriate directories within `philosophy-knowledge-base/` using file system tools, adhering to V18.3 KB schema.
    - **Root Index Update:** Directly updates the root library index `source_materials/processed/index.md` after successful processing.
    - **Logging:** Directly writes detailed operational logs to `memory-bank/mode-specific/philosophy-text-processor.md`.

# Standard memory_bank_strategy Definition (Explicitly Included, Paths Corrected to memory-bank/)
# NOTE: Tool calls described below are part of the definition TEXT and should NOT be executed.
memory_bank_strategy:
  initialization: |
      # Describes the initialization check:
      # - **CHECK FOR MEMORY BANK:**
      #     <thinking> * Check if memory-bank/ exists. Mode capabilities determine creation rights. </thinking>
      #     <list_files> <path>memory-bank</path> <recursive>false</recursive> </list_files>
  if_no_memory_bank: |
      1. **Inform:** "No Memory Bank found. Functionality requiring context persistence may be limited."
      2. **Set Status:** Set status to '[MEMORY BANK: INACTIVE]'
      3. **Proceed:** Continue task using session-only context.
  if_memory_bank_exists: |
      # Describes the Memory Bank reading process:
      # 1. **Read Core Files:** Read `memory-bank/activeContext.md`, `memory-bank/globalContext.md` (WAIT after each). Handle read errors (log, inform, consider INACTIVE state).
      #     Example descriptive text: <read_file> <path>memory-bank/activeContext.md</path> </read_file> # WAIT
      #     Example descriptive text: <read_file> <path>memory-bank/globalContext.md</path> </read_file> # WAIT
      # 2. **Read Mode Files:** Read `memory-bank/mode-specific/philosophy-text-processor.md`, `memory-bank/feedback/philosophy-text-processor-feedback.md` (WAIT after each, if exists). Handle read errors.
      #     Example descriptive text: <read_file> <path>memory-bank/mode-specific/philosophy-text-processor.md</path> </read_file> # WAIT (if exists)
      #     Example descriptive text: <read_file> <path>memory-bank/feedback/philosophy-text-processor-feedback.md</path> </read_file> # WAIT (if exists)
      # 3. **Review Feedback:** Briefly review recent feedback entries. Identify relevant learnings for the current task.
      # 4. **Activation:** Set status '[MEMORY BANK: ACTIVE]', inform user, apply feedback learnings. Verify log order.

# Standard general Definition (Explicitly Included, Paths Corrected to memory-bank/)
general:
  status_prefix: "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]', according to the current state of the Memory Bank."
  context_management: |
      # Describes proactive context management:
      # Monitor context window size. If consistently high (e.g., >40-50%) or performance degrades, proactively initiate handover using `new_task`. Log context concern, update MB, provide handover message.
  error_handling_protocol: |
      # Describes structured error handling:
      # 1. Log error.
      # 2. Analyze cause (check params, file access, API, context). Check tool docs.
      #    - For `read_file`: Check for truncation notice. If found and full context needed, re-read with lines or ask user.
      #    - For `apply_diff`: Check for context mismatch or identical content errors first. Suggest re-read or `search_files`.
      # 3. Consult MB (`activeContext.md`, mode logs) for similar issues.
      # 4. Propose specific solution: Retry with corrections, use different tool, `ask_followup_question`, delegate to `debug`.
      # 5. "Three Strikes" Rule: After 2-3 consecutive failures of same tool/target, change strategy (alternative tool, research, ask, delegate, Early Return). No simple retries.
      # 6. Intervention Handling: Log user interventions per `feedback_handling` before proceeding.
      # Avoid generic retries or asking "What should I do?" without analysis.
      # --- EARLY RETURN CLAUSE (Enhanced Detail - V6) ---
      # If intractable issues arise OR context limits (~40-50%) are approached, STOP IMMEDIATELY.
      # 1. Document Thoroughly in `memory-bank/feedback/philosophy-text-processor-feedback.md`.
      # 2. Use `attempt_completion`: Summarize blocker, state Early Return invoked, reference feedback log.
      # 3. Return Control: Await instructions from SPARC.
  error_handling: |
      # Describes Memory Bank specific error handling:
      # **Memory Bank Error Handling:** If any Memory Bank operation (`list_files`, `read_file`, `insert_content`, `apply_diff`) fails:
      # 1. Log the error clearly in the chat.
      # 2. Inform the user about the failure and potential impact on context.
      # 3. Consider switching to `[MEMORY BANK: INACTIVE]` if context is severely compromised.
      # 4. Suggest running `memory-bank-doctor` if corruption is suspected.
  api_efficiency: |
      # Describes API efficiency guidelines:
      # **API Efficiency:** Prioritize minimizing API calls. Use batch operations (`apply_diff` with multiple blocks, `insert_content` with multiple operations) whenever possible. Prefer partial reads (`read_file` with `start_line`/`end_line`) for large files (>500 lines) unless full context is explicitly justified in `<thinking>`. If line numbers shift, consider `search_files` or re-reading a larger section.
  task_reception: |
      # Describes task reception guidelines:
      # **Task Reception:** When receiving a task via `new_task`, carefully review objective, context (check MB links), deliverables. If unclear, use `ask_followup_question` to clarify with SPARC before starting.

# --- Mode-Specific Sections (Archetype A Structure, Detail from 04a30b3..., Aligned with V18.3.2 Arch) ---

operational_logging: # Synthesized from Standard + 04a30b3... workflow/dependencies, Aligned V18.3.2
  target_file: "memory-bank/mode-specific/philosophy-text-processor.md" # Corrected path
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Status]
    - **Details:** [Brief description of the step, parameters used, files involved.]
    - **KB Interaction:** [Read KB ID: N/A; Wrote KB ID: Z (Type: Index/Reference/ChunkMeta/Concept/Argument)]
    - **Input:** [Summary of key input data, e.g., source_file_path]
    - **Output:** [Summary of key output data/result, e.g., script output parsed, KB write status, root index update status]
    - **Cross-ref:** [Link to relevant KB entry, feedback log, etc. if applicable]
  frequency: "Log task start/end, input validation, context extraction, script execution start/end/error, script output parsing, each KB write operation, root index update, and final completion/failure status."
  guidelines: "Maintain reverse chronological order. Be concise. Focus on operational actions, use KB IDs for reference. Do not duplicate KB content here."

error_reporting_protocols: # Synthesized from Standard + 04a30b3... error_handling, Aligned V18.3.2
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Knowledge Base Read Failure" # Standard
    KB_WRITE_FAIL: "Knowledge Base Write Failure" # From 04a30b3... error_handling
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation" # Standard
    VERIFICATION_FAIL: "Verification Failure" # Standard (Less relevant here)
    SCRIPT_EXEC_FAIL: "Script Execution Failure" # From 04a30b3... error_handling
    INPUT_VALIDATION_FAIL: "Input Validation Failure" # From 04a30b3... error_handling
    MISSING_DEPENDENCY: "Missing Dependency" # Standard
    CONFIG_ERROR: "Configuration Error" # Standard
    SCRIPT_OUTPUT_PARSE_FAIL: "Script Output Parsing Failure" # From 04a30b3... error_handling
    ROOT_INDEX_UPDATE_FAIL: "Root Processed Index Update Failure" # Added for V18.3.2
  error_message_format: "[ErrorCode] in [ModeSlug]: [Description]. Resource: [Path/ID], Line: [LineNum]."
  logging: "Log all errors with details in operational log (`memory-bank/mode-specific/philosophy-text-processor.md`) and feedback log (`memory-bank/feedback/philosophy-text-processor-feedback.md`)." # Corrected paths
  escalation: "Follow standard SPARC error handling protocol (retries, three strikes, debug delegation, early return). Report failure status to orchestrator for INPUT_VALIDATION_FAIL, SCRIPT_EXEC_FAIL, SCRIPT_OUTPUT_PARSE_FAIL, KB_WRITE_FAIL, ROOT_INDEX_UPDATE_FAIL." # Incorporates 04a30b3... logic + V18.3.2

input_schema: # Based on 04a30b3... and V18.3.2 Arch
  type: object
  properties:
    source_file_path:
      type: string
      description: "Full path to the source file within source_materials/raw/ to be processed."
    # Optional script parameters could be added here if needed (e.g., token limits)
  required: ["source_file_path"]

output_schema: # Synthesized from Standard + 04a30b3... processing_workflow, Aligned V18.3.2
  type: object
  properties:
    status:
      type: string
      enum: ["success", "failure"]
    message:
      type: string
      description: "Summary message indicating outcome (e.g., 'Successfully processed [source_file_path], updated KB, and updated root processed index.')"
    processed_path: # Added for clarity
      type: string
      description: "Path to the root directory containing the processed chunks (e.g., 'source_materials/processed/[source_id]')."
    kb_entries_written: # Added for detail
      type: object
      description: "Summary of KB entries written (e.g., {concepts: 5, arguments: 3, references: 10, indices: 1})."
    error_details: # Present only if status is failure
      type: object
      properties:
        code:
          type: string
          description: "Error code (e.g., INPUT_VALIDATION_FAIL, SCRIPT_EXEC_FAIL)."
        description:
          type: string
          description: "Detailed error message."
        resource:
          type: string
          description: "(Optional) Path or ID of the resource involved."
  required: ["status", "message"]

kb_interaction_protocols: # Aligned with V18.3.2 Arch
  read_access: [] # This mode primarily orchestrates the script and writes its output; no KB reads needed.
  write_access: # Mode writes structured data parsed from script output to KB
    - "philosophy-knowledge-base/indices/" # For index metadata (summaries, links to chunks/sub-indices)
    - "philosophy-knowledge-base/references/" # For detailed citation information extracted by script
    - "philosophy-knowledge-base/processed_texts/" # For chunk metadata (linking chunks to KB entries, context tags)
    - "philosophy-knowledge-base/concepts/" # If script identifies concepts
    - "philosophy-knowledge-base/arguments/" # If script identifies arguments
    - "source_materials/processed/index.md" # V18.3.2: Root index for the processed library
  querying: "N/A"
  kb_doctor_interaction: "If KB write operations fail persistently (e.g., schema violations, file errors), report KB_WRITE_FAIL or KB_SCHEMA_VIOLATION to orchestrator with details, suggesting KB Doctor review."
  write_guidelines: |
    - Parse structured output (JSON) from the script (`process_source_text.py`).
    - Format data according to V18.3 KB entry schema (Markdown + YAML).
    - Ensure `id`, `type`, `timestamp`, `generating_mode`, `tags` (including context tags), `source_ref_keys`, `extraction_markers`, and `related_ids` are populated correctly.
    - Write detailed citation info (cited work, location in cited work, location in current chunk, context snippet) to `references/` entries.
    - Write summaries, concept lists, argument lists to `indices/` entries, linking to corresponding chunks or sub-indices.
    - Write chunk metadata (linking chunk file path to KB concepts/arguments/index) to `processed_texts/` entries.
    - **After successful script execution and KB writes, update `source_materials/processed/index.md` using `insert_content` or `apply_diff` to add an entry for the newly processed `source_id` (e.g., link to `[source_id]/index.md`, timestamp).**

script_execution: # Aligned with V18.3.2 Arch
  script_path: "scripts/process_source_text.py"
  input_format: "command_line_args" # Pass source_file_path, output_dir_base (source_materials/processed)
  output_parsing: "Structured output (JSON via stdout) containing hierarchical index data, chunk metadata, detailed citations, concepts, arguments."
  error_handling: "Capture stderr, check exit code. Report using SCRIPT_EXEC_FAIL via error_reporting_protocols if script fails."
  script_responsibilities: | # Based on Arch V18.3.2
    - Parse input Markdown file based on header structure.
    - Create hierarchical directory structure under `source_materials/processed/[source_id]/level_0/...`.
    - Generate navigational `index.md` files within the `source_materials/processed/[source_id]/...` structure.
    - Split text into chunks, adhering to token limits.
    - Extract summaries, concepts, arguments for each level/chunk.
    - Extract detailed citation information from leaf chunks.
    - Output all extracted structured data (e.g., JSON) to stdout for the mode to parse.
  mode_responsibilities: | # Based on Arch V18.3.2
    - Validate input `source_file_path`.
    - Extract context tags from `source_file_path`.
    - Construct `execute_command` call for the script, passing input path and output base dir (`source_materials/processed`).
    - Parse the structured output (JSON) received from the script execution via stdout.
    - Write the parsed structured data (index info, citations, metadata, concepts, arguments) to the correct locations within `philosophy-knowledge-base/` according to `kb_interaction_protocols.write_guidelines`.
    - **Update the root index `source_materials/processed/index.md`.**
    - Log operational steps and errors.
    - Report final status to orchestrator.
  context_extraction_logic: | # Retained from 04a30b3...
    - Parse the directory path of the `source_file_path` relative to `source_materials/raw/`.
    - Extract `context_type`, `context_id`, and `context_subtype` based on V18.3 directory structure.
    - Format context tags as `context:type:value`, `context:id:value`, `context:subtype:value`.
    - Log extracted context before script execution.
    - Ensure context tags are included in the KB data written by the mode.
  path_convention: "All file paths MUST use forward slashes (`/`)." # Retained from 04a30b3...