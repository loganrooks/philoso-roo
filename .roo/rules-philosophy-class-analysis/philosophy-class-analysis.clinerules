# .roo/rules-philosophy-class-analysis/philosophy-class-analysis.clinerules
# Version: 2.0
# Date: 2025-05-05
# Based on: docs/standards/clinerules_standard_v2.md (Archetype B)
# Based on: docs/architecture/architecture_v18.md (V18.3.4)

# --- 3. Common Configuration ---

# 3.1 Mode Identification
mode: philosophy-class-analysis

# 3.2 Identity
identity:
  name: "üßë‚Äçüè´ Philosophy Class Analysis"
  description: |
    Analyzes lecture transcripts/notes using processed chunks/indices from the KB.
    Integrates findings with pre-lecture analysis (concepts, questions).
    Identifies key lecture themes, arguments, clarifications, and connections/divergences from readings.
    Stores findings directly in the KB (`philosophy-knowledge-base/`), ensuring philosophical rigor and creating relationship entries.
    Interacts directly with operational context (`phil-memory-bank/`).

# 3.3 Memory Bank Strategy
memory_bank_strategy:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to standard Memory Bank strategy defined centrally.
  # Initialization, update triggers, and feedback handling are defined globally.
  # Mode-specific updates are handled via operational_logging.

# 3.4 General Rules
general:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to general rules (status prefix, context management, error handling protocol including V2 apply_diff guidance, MB error handling, critical evaluation, API efficiency, task reception) defined centrally.

# 3.5 Operational Context Protocols (New V2 Section - STRICT PROTOCOL)
operational_context_protocols:
  write_access: "Modes MUST write operational logs ONLY to their designated `phil-memory-bank/mode-specific/philosophy-class-analysis.md` file using `insert_content` (reverse chrono) or `apply_diff` (targeted updates). Batching recommended."
  read_access: "Modes CAN read any file within `phil-memory-bank/` (global context, other mode logs, feedback) using `read_file` or `search_files` as needed for operational context, guided by `Orchestrator` delegation."
  separation_mandate: "Strict separation MUST be maintained. NO philosophical domain knowledge (KB data) is permitted within `phil-memory-bank/`."

# 3.6 Operational Logging (STRICT PROTOCOL - V2 Update)
operational_logging:
  target_file: "phil-memory-bank/mode-specific/philosophy-class-analysis.md" # Updated path
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Status]
    - **Details:** [Brief description of the step, parameters used, files involved.]
    - **KB Interaction:** [Read KB ID: X, Y; Wrote KB ID: Z (Type: Concept)]
    - **Input:** [Summary of key input data]
    - **Output:** [Summary of key output data/result]
    - **Cross-ref:** [Link to relevant KB entry, feedback log, etc. if applicable]
  frequency: "Log task start/end, major sub-steps, all KB R/W ops, MCP calls, script calls, verification, errors, interventions."
  guidelines: "Maintain reverse chronological order. Be concise. Focus on operational actions, use KB IDs. Do not duplicate KB content. Recommend batching log entries before writing via `insert_content`." # V2 Batching recommendation added

# 3.7 Error Reporting Protocols (STRICT PROTOCOL - V2 Update)
error_reporting_protocols:
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Knowledge Base Read Failure"
    KB_WRITE_FAIL: "Knowledge Base Write Failure"
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation"
    ANALYSIS_ERROR: "Internal error during analysis of lecture content."
    PRE_LECTURE_INTEGRATION_FAIL: "Failed to retrieve or integrate with specified pre-lecture analysis entries."
    MISSING_INPUT: "Required input (e.g., lecture material ID, pre-lecture ID) not provided."
    CONFIG_ERROR: "Configuration Error"
    MCP_TOOL_FAIL: "MCP Tool Execution Failure" # V2 Added
    MCP_SERVER_UNAVAILABLE: "MCP Server Unavailable" # V2 Added
    CONCURRENCY_CONFLICT: "Concurrency Conflict Detected (e.g., lock file)" # V2 Added
  error_message_format: "[ErrorCode] in philosophy-class-analysis: [Description]. Resource: [Path/ID], Line: [LineNum]." # V2 Format
  logging: "Log all errors with details in operational log (`phil-memory-bank/mode-specific/philosophy-class-analysis.md`) and feedback log (`phil-memory-bank/feedback/philosophy-class-analysis-feedback.md`)." # Updated paths
  escalation: "Follow standard SPARC error handling protocol (retries, three strikes, debug delegation, early return)."

# 3.8 MCP Interaction Protocols (New V2 Section)
mcp_interaction_protocols:
  strategy_reference: "Adheres to 'Distributed MCP Calls' strategy defined in `docs/blueprints/mcp_integration_v1.md`."
  allowed_tools: [] # This mode primarily interacts with local KB/MB, no external tools currently defined. Add if needed (e.g., fetching external lecture notes).
  security_mandate: "API keys/secrets MUST NOT be included in `.clinerules` or code. Access MUST be managed via environment variables on the MCP server."
  error_handling: "Report MCP failures using `MCP_TOOL_FAIL` or `MCP_SERVER_UNAVAILABLE` via `error_reporting_protocols`. Follow standard escalation."
  usage_guidelines: "N/A (No MCP tools currently defined)."

# 3.9 Concurrency Coordination Protocols (New V2 Section - STRICT PROTOCOL)
concurrency_coordination_protocols:
  risk_acknowledgment: "Direct file access by multiple modes introduces risks (race conditions, data corruption). These protocols aim to mitigate, but not eliminate, these risks. Adherence by all modes is critical."
  locking_mechanism:
    type: "Advisory File Locking"
    lock_file_location: "phil-memory-bank/locks/" # Updated path
    lock_file_naming: "[file_path_hash].lock (e.g., MD5 hash of relative path)"
    protocol: |
      1. Before critical writes (`write_to_file`, `apply_diff` on shared files like KB entries): Calculate hash of target file path. Check for `phil-memory-bank/locks/[hash].lock`.
      2. If lock file absent: Create the lock file. Perform write operation on the target file. Delete the lock file.
      3. If lock file present: Wait briefly (e.g., 1-2 seconds), retry check 1-2 times. If still locked, report `CONCURRENCY_CONFLICT` to Orchestrator and await instructions. Do NOT proceed with write.
    scope: "Recommended for writes to shared KB files or critical `phil-memory-bank/` files where simultaneous access is plausible."
  orchestrator_role: "Orchestrator SHOULD sequence tasks targeting the same critical files whenever feasible."

# 3.10 Rule Inheritance Guidelines (New V2 Section)
rule_inheritance_guidelines:
  yaml_anchors: "YAML anchors (`&`) and aliases (`*`) MAY be used within this file for reusing common blocks, if supported by the parser. Verify support."
  external_includes: "Current RooCode parser status regarding external file includes (`!include`) is Not Supported." # Verify/Update
  documentation_convention: "Mandatory: This mode MUST explicitly state adherence to centrally defined standards via comments, referencing `docs/standards/clinerules_standard_v2.md` and relevant section numbers."

# --- 5. Archetype B: Complex Analysis/Generation Mode ---

# 5.1 Input Schema
input_schema:
  description: "Inputs required for analyzing lecture content and integrating with pre-lecture work."
  type: object
  properties:
    lecture_material_kb_ids:
      type: array
      items:
        type: string
      description: "Array of KB IDs pointing to processed lecture transcript chunks/indices in `philosophy-knowledge-base/processed_texts/` or `philosophy-knowledge-base/indices/`."
    pre_lecture_analysis_kb_ids:
      type: array
      items:
        type: string
      description: "Array of KB IDs pointing to relevant pre-lecture analysis entries (Concepts, Questions) in the KB, used for integration."
    analysis_focus:
      type: string
      description: "Optional: Specific themes or questions to focus on during analysis."
  required:
    - lecture_material_kb_ids
    - pre_lecture_analysis_kb_ids

# 5.2 Output Schema
output_schema:
  description: "Outputs generated from the class analysis process."
  type: object
  properties:
    status:
      type: string
      enum: [success, partial_success, failure]
      description: "Indicates the overall success or failure of the analysis task."
    new_kb_entry_ids:
      type: object
      properties:
        concepts:
          type: array
          items: { type: string }
        arguments:
          type: array
          items: { type: string }
        questions:
          type: array
          items: { type: string }
        relationships:
          type: array
          items: { type: string }
      description: "Object containing arrays of KB IDs for new entries created during analysis (Concepts, Arguments, Questions, Relationships)."
    analysis_summary:
      type: string
      description: "A brief textual summary of the key findings, identified themes, arguments, and connections/divergences noted during the lecture analysis."
    error_details:
      type: object # Follows format defined in error_reporting_protocols
      description: "Structured error object if status includes failure."
  required:
    - status
    - new_kb_entry_ids # Return even if empty arrays on success
    - analysis_summary # Provide summary even on partial success

# 5.3 Workspace Management (Optional)
# Not typically required for this mode. Define if needed for complex intermediate analysis steps.

# 5.4 Knowledge Base Interaction Protocols (STRICT PROTOCOL - V2/V18.3.4 Update)
kb_interaction_protocols:
  read_access:
    # Adheres to V18.3.4 Direct KB Read Access principle.
    description: "Defines read access patterns for retrieving necessary context directly from the KB using file tools."
    allowed_paths:
      - "philosophy-knowledge-base/processed_texts/" # Lecture chunks
      - "philosophy-knowledge-base/indices/"        # Lecture indices
      - "philosophy-knowledge-base/concepts/"       # Pre-lecture & existing concepts
      - "philosophy-knowledge-base/arguments/"      # Pre-lecture & existing arguments
      - "philosophy-knowledge-base/questions/"      # Pre-lecture & existing questions
      - "philosophy-knowledge-base/references/"     # Source metadata
      - "philosophy-knowledge-base/relationships/"  # Existing relationships for context
      - "philosophy-knowledge-base/_operational/formatting_templates_rules/" # For self-validation
    methods:
      - tool: read_file # For direct access using KB IDs provided in input or found via search/links
      - tool: search_files # For finding related entries using tags or content snippets
  write_access:
    # Adheres to V18.3.4 Defined KB Write Patterns principle.
    description: "Defines write access patterns for storing analysis results directly in the KB using file tools."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/"
      - "philosophy-knowledge-base/arguments/"
      - "philosophy-knowledge-base/questions/"
      - "philosophy-knowledge-base/relationships/" # CRITICAL for linking lecture analysis to pre-lecture
    methods:
      - tool: write_to_file # For creating new KB entry files
      - tool: insert_content # For adding to existing entries if applicable (e.g., adding relationships) - Use with caution, prefer write_to_file for new entries.
      - tool: apply_diff # For targeted updates to existing entries (e.g., updating verification status) - Use with caution.
    schema_adherence: |
      # Adheres to V18.3.4 KB Entry Format (Arch Doc Sec 6).
      - **STRICT:** All writes MUST conform to the full V18.3.4 KB schema (YAML frontmatter + Markdown content).
      - MUST generate unique, meaningful KB entry IDs (e.g., `concept_class_[date]_[topic_hash]_[seq]`).
      - MUST populate linking fields accurately: `source_ref_keys`, `extraction_markers`, `related_ids`.
      - **Relationship entries MUST be created** to explicitly link new lecture-derived entries to the corresponding `pre_lecture_analysis_kb_ids`.
  querying: |
    # Guidelines for efficient KB querying using file tools.
    - Primarily uses KB IDs provided in `input_schema`.
    - Use `search_files` with regex targeting YAML frontmatter fields (id, type, tags like `context:id:PHL316`) for initial discovery of related entries.
    - Use `read_file` for specific KB entry IDs identified via search or `related_ids`.
    - Follow relationship links (`related_ids`) to gather related context. Avoid reading entire directories.
  kb_maintenance_interaction: |
    # V2 Update: Reporting inconsistencies, not triggering maintenance.
    - If KB inconsistencies (broken links, schema violations detected during read, conflicting information) are detected during R/W, report details (e.g., KB_SCHEMA_VIOLATION, MISSING_DEPENDENCY) to Orchestrator, suggesting MetaReflector/VerificationAgent review.
  validation_hooks: |
    # V2 Addition: Self-validation attempt.
    - Modes performing KB writes SHOULD attempt self-validation against schemas/rules in `philosophy-knowledge-base/_operational/formatting_templates_rules/` before writing. `VerificationAgent` performs mandatory post-write checks during workflows.
  rigor_field_handling: |
    # V2 Addition: Explicit rigor field population.
    - Modes MUST explicitly populate relevant rigor fields (e.g., `positive_determination`, `negative_determination`, `presuppositions`, `counter_arguments`, `verification_status`) per Arch Doc Sec 6 when creating/updating KB entries.

# 5.5 Conceptual Determinacy (Guideline Section - V2/V18.3.4 Update)
conceptual_determinacy:
  # Adheres to V18.3.4 Rigor Principles.
  guidelines: |
    - Focus on identifying how concepts are defined, used, or clarified within the lecture context.
    - Explicitly contrast lecture usage/definitions with pre-lecture understanding derived from readings (using Relationship entries).
    - Note any shifts in meaning, ambiguity resolved, or new nuances introduced during the lecture.
    - Identify implicit assumptions or conceptual frameworks employed by the lecturer.
  requirements:
    negative_definition: required # Note what a concept is *not*, if clarified in lecture.
    disambiguation_protocol: required_if_ambiguous # If lecture addresses ambiguity noted in pre-lecture, document the resolution.
    ordinary_language_contrast: recommended # Encourage contrasting with everyday usage.
  implementation: |
    # References V18.3.4 KB Schema Fields (Arch Doc Sec 6).
    When generating 'Concept' entries:
    1. Attempt to populate `positive_determination` and `negative_determination` fields in YAML.
    2. If term is potentially ambiguous, populate `ambiguities` field and clarify intended sense.
    3. Consider adding notes to `ordinary_language_contrast` field.
    4. Link related concepts via `related_terms` and `related_ids`.
    5. Log steps taken to ensure determinacy in operational log.

# 5.6 Evidence Standards (Guideline Section + Strict Workflow - V2/V18.3.4 Update)
evidence_standards:
  # Adheres to V18.3.4 Rigor Principles.
  requirements: |
    - **Mandatory Linking:** ALL generated KB entries (Concepts, Arguments, Questions, Relationships) MUST be directly linked to their source evidence.
    - Use `source_ref_keys` to point to specific lecture chunk KB IDs (`processed_texts/...`).
    - Use `extraction_markers` (text snippets/line numbers/chunk IDs) for precise location within the source chunk.
    - Use `related_ids` within the KB entries and dedicated Relationship entries to link lecture analysis back to relevant pre-lecture KB entries (`pre_lecture_analysis_kb_ids`).
  verification_workflow:
    # Verification is typically handled by VerificationAgent, not this mode.
    enabled: false
    trigger: "N/A"
    steps: "N/A"
    failure_handling: "N/A"

# 5.7 Version Control (If Applicable)
# Not directly applicable to this mode's core function. EssayPrep handles essay versioning.