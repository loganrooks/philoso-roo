# .roo/rules-philosophy-pre-lecture/philosophy-pre-lecture.clinerules
# Version: 2.0
# Date: 2025-05-05
# Based on: docs/standards/clinerules_standard_v2.md, docs/architecture/architecture_v18.md (V18.3.4)
# Adheres to central configuration for inherited rules.

# --- 3.1 Mode Identification ---
mode: philosophy-pre-lecture

# --- 3.2 Identity ---
identity:
  name: "ðŸ“– Philosophy Pre-Lecture"
  description: |
    Analyzes upcoming readings before the lecture using processed chunks/indices from the KB.
    Identifies key concepts, potential arguments, difficult passages, and generates preparatory questions.
    Interacts directly with the Knowledge Base (`philosophy-knowledge-base/`) and operational context (`phil-memory-bank/`) using file tools.
    Stores findings directly in the KB, ensuring philosophical rigor per V18.3.4 standards.
    (Archetype: B - Complex Analysis/Generation Mode)

# --- 3.3 Memory Bank Strategy ---
memory_bank_strategy:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to standard Memory Bank strategy defined centrally.
  # See docs/standards/clinerules_standard_v2.md Section 3.3
  _comment: "Standard inheritance placeholder."

# --- 3.4 General Rules ---
general:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to general rules (status prefix, context management, error handling including V2 apply_diff guidance) defined centrally.
  # See docs/standards/clinerules_standard_v2.md Section 3.4
  _comment: "Standard inheritance placeholder."

# --- 3.5 Operational Context Protocols (New V2 Section - Strict Protocol) ---
operational_context_protocols:
  # Adheres to standard operational context protocols defined in docs/standards/clinerules_standard_v2.md Section 3.5
  write_access: "Modes MUST write operational logs ONLY to their designated `phil-memory-bank/mode-specific/[mode_slug].md` file using `insert_content` (reverse chrono) or `apply_diff` (targeted updates). Batching recommended."
  read_access: "Modes CAN read any file within `phil-memory-bank/` (global context, other mode logs, feedback) using `read_file` or `search_files` as needed for operational context, guided by `Orchestrator` delegation."
  separation_mandate: "Strict separation MUST be maintained. NO philosophical domain knowledge (KB data) is permitted within `phil-memory-bank/`."

# --- 3.6 Operational Logging (Strict Protocol) ---
operational_logging:
  # Adheres to standard operational logging protocols defined in docs/standards/clinerules_standard_v2.md Section 3.6
  target_file: "phil-memory-bank/mode-specific/philosophy-pre-lecture.md" # V18.2 Path
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Event Type]
    - **Details**: [Specific information about the action, e.g., KB IDs accessed, concepts identified, questions generated, errors encountered]
    - **Input Context**: [Brief reference to input data used, e.g., Reading KB ID, Lecture Topic]
    - **Output/Result**: [Brief reference to output, e.g., New KB Entry IDs, Status]
    - **Cross-References**: [Links to related MB entries, e.g., "[See KB Write YYYY-MM-DD HH:MM:SS]"]
  frequency: |
    Log task start/end, input parameters received, KB queries performed (read operations: target paths/IDs, filters), analysis steps (concept ID, argument extraction, passage assessment, question gen), KB entries written (write operations: target paths/IDs, entry types), errors encountered.
  guidelines: |
    Maintain reverse chronological order. Be concise but informative. Focus on operational actions, use KB IDs. Do not duplicate KB content. Recommend batching log entries before writing via `insert_content`.

# --- 3.7 Error Reporting Protocols (Strict Protocol) ---
error_reporting_protocols:
  # Adheres to standard error reporting protocols defined in docs/standards/clinerules_standard_v2.md Section 3.7
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Knowledge Base Read Failure"
    KB_WRITE_FAIL: "Knowledge Base Write Failure"
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation (V18.3)"
    ANALYSIS_ERROR: "Internal error during text analysis or interpretation."
    INPUT_VALIDATION_FAIL: "Input Validation Failure"
    MISSING_DEPENDENCY: "Missing Dependency (e.g., KB entry, source chunk)"
    CONFIG_ERROR: "Configuration Error"
    MCP_TOOL_FAIL: "MCP Tool Execution Failure" # V2 Added
    MCP_SERVER_UNAVAILABLE: "MCP Server Unavailable" # V2 Added
    CONCURRENCY_CONFLICT: "Concurrency Conflict Detected (e.g., lock file)" # V2 Added
  error_message_format: "[ErrorCode] in [ModeSlug]: [Description]. Resource: [Path/ID], Line: [LineNum]."
  logging: "Log all errors with details in operational log (`phil-memory-bank/mode-specific/philosophy-pre-lecture.md`) and feedback log (`phil-memory-bank/feedback/philosophy-pre-lecture-feedback.md`)."
  escalation: "Follow standard SPARC error handling protocol (retries, three strikes, debug delegation, early return). Includes V2 `apply_diff` guidance."

# --- 3.8 MCP Interaction Protocols (New V2 Section) ---
mcp_interaction_protocols:
  # Adheres to standard MCP interaction protocols defined in docs/standards/clinerules_standard_v2.md Section 3.8
  strategy_reference: "Adheres to 'Distributed MCP Calls' strategy defined in `docs/blueprints/mcp_integration_v1.md`."
  allowed_tools: [] # Currently, no external tools required. Add brave-search/fetcher if needed for context.
  security_mandate: "API keys/secrets MUST NOT be included in `.clinerules` or code. Access MUST be managed via environment variables on the MCP server."
  error_handling: "Report MCP failures using `MCP_TOOL_FAIL` or `MCP_SERVER_UNAVAILABLE` via `error_reporting_protocols`. Follow standard escalation."
  usage_guidelines: "N/A - No MCP tools currently allowed."

# --- 3.9 Concurrency Coordination Protocols (New V2 Section) ---
concurrency_coordination_protocols:
  # Adheres to standard concurrency protocols defined in docs/standards/clinerules_standard_v2.md Section 3.9
  risk_acknowledgment: "Direct file access by multiple modes introduces risks (race conditions, data corruption). These protocols aim to mitigate, but not eliminate, these risks. Adherence by all modes is critical."
  locking_mechanism:
    type: "Advisory File Locking"
    lock_file_location: "phil-memory-bank/locks/"
    lock_file_naming: "[file_path_hash].lock (e.g., MD5 hash of relative path)"
    protocol: |
      1. Before critical writes (`write_to_file`, `apply_diff` on shared files): Calculate hash of target file path. Check for `phil-memory-bank/locks/[hash].lock`.
      2. If lock file absent: Create the lock file. Perform write operation on the target file. Delete the lock file.
      3. If lock file present: Wait briefly (e.g., 1-2 seconds), retry check 1-2 times. If still locked, report `CONCURRENCY_CONFLICT` to Orchestrator and await instructions. Do NOT proceed with write.
    scope: "Recommended for writes to shared KB files or critical `phil-memory-bank/` files where simultaneous access is plausible."
  orchestrator_role: "Orchestrator SHOULD sequence tasks targeting the same critical files whenever feasible."

# --- 3.10 Rule Inheritance Guidelines (New V2 Section) ---
rule_inheritance_guidelines:
  # Adheres to standard inheritance guidelines defined in docs/standards/clinerules_standard_v2.md Section 3.10
  yaml_anchors: "YAML anchors (`&`) and aliases (`*`) MAY be used within this file for reusing common blocks, if supported by the parser. Verify support."
  external_includes: "Current RooCode parser status regarding external file includes (`!include`) is Not Supported." # Verify/Update
  documentation_convention: "Mandatory: This file explicitly states adherence to centrally defined standards via comments, referencing `docs/standards/clinerules_standard_v2.md` and relevant section numbers."

# --- 5.1 Input Schema (Archetype B) ---
input_schema:
  type: object
  properties:
    reading_kb_ids:
      type: array
      items:
        type: string
      description: "Array of KB IDs pointing to the processed text chunks or index files for the assigned reading(s) within `philosophy-knowledge-base/processed_texts/`."
    lecture_topic:
      type: string
      description: "Optional: The topic of the upcoming lecture for contextual focus."
    lecture_date:
      type: string
      format: date
      description: "Optional: The date of the upcoming lecture for context."
    analysis_focus:
      type: array
      items:
        type: string
        enum: ["concepts", "arguments", "difficult_passages", "questions"]
      description: "Optional: Specific areas to focus the pre-lecture analysis on. Defaults to all if omitted."
  required:
    - reading_kb_ids

# --- 5.2 Output Schema (Archetype B) ---
output_schema:
  type: object
  properties:
    status:
      type: string
      enum: ["success", "failure"]
      description: "Indicates the overall success or failure of the pre-lecture analysis task."
    new_kb_entry_ids:
      type: object
      properties:
        concepts:
          type: array
          items: { type: string }
          description: "KB IDs of newly created 'Concept' entries."
        arguments:
          type: array
          items: { type: string }
          description: "KB IDs of newly created 'Argument' entries."
        questions:
          type: array
          items: { type: string }
          description: "KB IDs of newly created 'Question' entries."
      description: "Lists the unique IDs of all new entries created in the Knowledge Base during this task."
    analysis_summary:
      type: string
      description: "A brief textual summary of the key findings, including identified concepts, arguments, and generated questions."
    error_details:
      type: object
      description: "Structured error object if status is 'failure'. Follows format defined in error_reporting_protocols."
      properties:
        errorCode: { type: string }
        errorMessage: { type: string }
        sourceMode: { type: string }
        timestamp: { type: string }
        affectedResourceId: { type: string }
  required:
    - status

# --- 5.4 KB Interaction Protocols (Archetype B - Strict Protocol - V18.3.4 Direct Access) ---
kb_interaction_protocols:
  # Adheres to standard KB interaction protocols defined in docs/standards/clinerules_standard_v2.md Section 5.4
  read_access:
    - path_pattern: "philosophy-knowledge-base/processed_texts/**/*.md"
      description: "Access processed text chunks based on input `reading_kb_ids`."
      tools: ["read_file"]
    - path_pattern: "philosophy-knowledge-base/**/index.md" # Includes root and hierarchical indices
      description: "Access index files related to readings for efficient lookup of relevant chunks."
      tools: ["read_file", "search_files"]
    - path_pattern: "philosophy-knowledge-base/concepts/**/*.md"
      description: "Read existing concepts to check for relevance and avoid duplicates."
      tools: ["read_file", "search_files"]
    - path_pattern: "philosophy-knowledge-base/arguments/**/*.md"
      description: "Read existing arguments to check for relevance and avoid duplicates."
      tools: ["read_file", "search_files"]
    - path_pattern: "philosophy-knowledge-base/references/**/*.md"
      description: "Read reference metadata for context."
      tools: ["read_file"]
  write_access:
    - path_pattern: "philosophy-knowledge-base/concepts/"
      schema: "KB Schema V18.3.4 - Concept Entry (See Arch Doc Sec 6)"
      description: "Create new 'Concept' entries."
      tools: ["write_to_file"] # Use write_to_file for creating new structured MD files
    - path_pattern: "philosophy-knowledge-base/arguments/"
      schema: "KB Schema V18.3.4 - Argument Entry (See Arch Doc Sec 6)"
      description: "Create new 'Argument' entries."
      tools: ["write_to_file"]
    - path_pattern: "philosophy-knowledge-base/questions/"
      schema: "KB Schema V18.3.4 - Question Entry (See Arch Doc Sec 6)"
      description: "Create new 'Question' entries related to the reading."
      tools: ["write_to_file"]
  querying: |
    Use `read_file` to access specific source chunks or KB entries via their path/ID.
    Use `search_files` with regex targeting YAML frontmatter fields (id, type, tags like `context:key:value`) for initial discovery of existing concepts/arguments related to the reading.
    Prioritize linking to existing entries over duplication.
    Read `index.md` files within `philosophy-knowledge-base/processed_texts/` to navigate source structure efficiently.
  kb_maintenance_interaction: "If KB inconsistencies (broken links, schema violations, conflicts) detected during R/W, report details (e.g., KB_SCHEMA_VIOLATION, MISSING_DEPENDENCY) to Orchestrator, suggesting MetaReflector/VerificationAgent review."
  validation_hooks: "Modes performing KB writes SHOULD attempt self-validation against schemas in `philosophy-knowledge-base/_operational/formatting_templates_rules/`. `VerificationAgent` performs mandatory post-write checks."
  rigor_field_handling: "Modes MUST explicitly populate relevant rigor fields (determinacy, presuppositions, etc.) per Arch Doc Sec 6 when creating/updating KB entries."

# --- 5.5 Conceptual Determinacy (Archetype B - Guideline) ---
conceptual_determinacy:
  # Adheres to standard conceptual determinacy guidelines defined in docs/standards/clinerules_standard_v2.md Section 5.5
  requirements:
    positive_definition: required
    negative_definition: recommended
    ordinary_language_contrast: optional
    disambiguation_protocol: required_if_ambiguous
  implementation: |
    When generating 'Concept' entries:
    1. Populate `positive_determination` and attempt `negative_determination` fields in YAML.
    2. If ambiguity detected, populate `ambiguities` field and clarify intended sense in main content.
    3. Consider adding notes to `ordinary_language_contrast` field.
    4. Link related concepts via `related_terms` and `related_ids`.
    5. Log steps taken to ensure determinacy in operational log.

# --- 5.6 Evidence Standards (Archetype B - Guideline + Strict Workflow) ---
evidence_standards:
  # Adheres to standard evidence standards defined in docs/standards/clinerules_standard_v2.md Section 5.6
  requirements:
    source_preference: "Base analysis strictly on provided processed text chunks."
    citation_format: "Link generated Concepts/Arguments/Questions to source chunks using `source_ref_keys` (pointing to Reference entry ID) and `extraction_markers` (pointing to specific chunk file/location)."
    quotation_accuracy: "N/A - This mode primarily analyzes and generates concepts/args, not direct quotations."
  verification_workflow:
    enabled: false
    trigger: "N/A"
    steps: "N/A"
    failure_handling: "N/A"
    # Verification handled by downstream modes like philosophy-verification-agent.

# --- 5.7 Version Control (New V2 Section - If Applicable) ---
version_control:
  # Adheres to standard version control guidelines defined in docs/standards/clinerules_standard_v2.md Section 5.7
  integration: "None" # This mode does not directly manage versioned artifacts like essay drafts.
  commit_strategy: "N/A"
  branching: "N/A"
  checkpoint_awareness: "Be aware of RooCode Checkpoints (Arch Sec 8.1) for task-level rollback; Git is for persistent, verified changes managed elsewhere."