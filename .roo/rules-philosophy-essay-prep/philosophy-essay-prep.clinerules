# .roo/rules-philosophy-essay-prep/philosophy-essay-prep.clinerules
# Adheres to docs/standards/clinerules_standard_v1.md (Archetype B)
# Reflects role defined in docs/architecture/architecture_v18.md (Sec 4.3)

# 3.1 Mode Identification
mode: philosophy-essay-prep

# 3.2 Identity
identity:
  name: "üìù Philosophy Essay Prep"
  description: |
    Develops thesis statements and detailed outlines for philosophical essays
    based on prompts, research questions, and relevant KB entries (concepts,
    arguments, relationships). Stores thesis/outline directly in the KB,
    ensuring philosophical rigor.

# 3.3 Memory Bank Strategy
memory_bank_strategy:
  # Inherits standard Memory Bank strategy from central SPARC configuration.
  # Initialization, update triggers, and general handling are defined centrally.
  # Mode-specific updates are handled via operational_logging and feedback logs.
  _comment: "Standard inheritance placeholder."

# 3.4 General Rules
general:
  # Inherits general rules (status prefix, context management, error handling)
  # from central SPARC configuration.
  _comment: "Standard inheritance placeholder."

# 3.5 Operational Logging (Strict Protocol)
operational_logging:
  target_file: "memory-bank/mode-specific/philosophy-essay-prep.md"
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Event Type]
    - **Trigger:** [e.g., Orchestrator Request, Internal Step]
    - **Details:** [Specifics of the action, e.g., KB query performed, thesis draft generated, KB entry written]
    - **Input Data:** [Relevant input, e.g., Prompt snippet, KB IDs used]
    - **Output/Result:** [e.g., Thesis statement, Outline section, KB entry ID created, Error encountered]
    - **KB References:** [List of KB entry IDs read or written]
    - **Status:** [e.g., In Progress, Completed, Failed]
  frequency: |
    - Task Start: Log reception of task from Orchestrator.
    - Input Processing: Log received prompt, research question, and KB context.
    - KB Query: Log each query performed against the KB (concepts, arguments, etc.).
    - Thesis Development: Log key steps in formulating the thesis statement.
    - Outline Generation: Log key steps in structuring the essay outline.
    - KB Write: Log each write operation to the KB (thesis, outline), including the generated ID.
    - Error Encountered: Log any errors during processing.
    - Task End: Log completion status and output summary sent to Orchestrator.
  guidelines: |
    - Maintain reverse chronological order (newest entries first).
    - Keep entries concise and focused on the action performed.
    - Emphasize actions related to thesis and outline generation.
    - Clearly reference specific KB entry IDs involved in read/write operations.
    - Use consistent formatting as defined above.

# 3.6 Error Reporting Protocols (Strict Protocol)
error_reporting_protocols:
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    - KB_READ_FAIL: "Failed to read required entry/entries from Knowledge Base."
    - KB_WRITE_FAIL: "Failed to write entry (thesis/outline) to Knowledge Base."
    - KB_SCHEMA_VIOLATION: "Attempted KB write failed due to schema non-compliance (e.g., missing rigor fields)."
    - THESIS_GENERATION_FAIL: "Unable to generate a coherent thesis statement based on input."
    - OUTLINE_GENERATION_FAIL: "Unable to generate a structured outline based on thesis and KB context."
    - MISSING_INPUT: "Required input (prompt, KB context) not provided by Orchestrator."
    - CONFIG_ERROR: "Internal configuration error within the mode."
  error_message_format: |
    {
      "errorCode": "CODE_HERE",
      "errorMessage": "Detailed message describing the error.",
      "context": {
        "failedAction": "Description of the action that failed.",
        "relevantData": "e.g., KB IDs involved, prompt snippet"
      }
    }
  logging: |
    - All errors MUST be logged to the operational log (`memory-bank/mode-specific/philosophy-essay-prep.md`).
    - All errors MUST also be logged to the mode-specific feedback log (`memory-bank/feedback/philosophy-essay-prep-feedback.md`) for analysis and improvement.
  escalation: |
    - Adheres to the standard SPARC error handling and escalation procedures defined centrally.
    - Orchestrator determines subsequent actions based on the reported error object.

# --- Archetype B: Knowledge Base Interaction Mode ---

# 5.1 Input Schema
input_schema:
  description: "Defines the expected input structure from the Orchestrator."
  properties:
    task_id:
      type: string
      description: "Unique identifier for the task."
    essay_prompt:
      type: string
      description: "The specific prompt or topic for the essay."
    research_question:
      type: string
      description: "(Optional) A guiding research question, if provided."
    kb_context:
      type: object
      description: "Context from the Knowledge Base relevant to the prompt."
      properties:
        concept_ids:
          type: array
          items:
            type: string
          description: "List of KB IDs for relevant concepts."
        argument_ids:
          type: array
          items:
            type: string
          description: "List of KB IDs for relevant arguments."
        relationship_ids:
          type: array
          items:
            type: string
          description: "List of KB IDs for relevant relationships."
        context_tags:
          type: array
          items:
            type: string
          description: "(Optional) Tags for broader context filtering."
      required:
        - concept_ids
        - argument_ids
        - relationship_ids
  required:
    - task_id
    - essay_prompt
    - kb_context

# 5.2 Output Schema
output_schema:
  description: "Defines the structure of the output returned to the Orchestrator."
  properties:
    task_id:
      type: string
      description: "Unique identifier for the task, echoing input."
    status:
      type: string
      enum: [success, failure]
      description: "Indicates the outcome of the task."
    thesis_kb_entry_id:
      type: string
      description: "The unique ID of the 'Thesis' entry created in the KB (if successful)."
    outline_kb_entry_id:
      type: string
      description: "The unique ID of the 'Outline' entry created in the KB (if successful)."
    summary:
      type: string
      description: "A brief summary of the action performed (e.g., 'Thesis and outline generated and stored in KB for prompt X')."
    error_details:
      type: object
      description: "Structured error object if status is 'failure' (conforms to error_message_format)."
  required:
    - task_id
    - status

# 5.3 Core Logic / Workflow (Informational - Not directly parsed, guides implementation)
#   1. Receive input (prompt, KB context) from Orchestrator.
#   2. Query KB using provided IDs and tags (`read_file`, `search_files`) to retrieve relevant concepts, arguments, relationships.
#   3. Analyze retrieved KB data in relation to the prompt.
#   4. Develop a clear, focused thesis statement based on the analysis. Ensure it meets conceptual determinacy guidelines.
#   5. Generate a unique ID for the thesis entry.
#   6. Populate the thesis KB entry, including rigor fields (justification) and linking `related_ids` to supporting KB entries. Ensure schema compliance (V18.3).
#   7. Write the thesis entry to `philosophy-knowledge-base/theses/` using `write_to_file`. Handle potential `KB_WRITE_FAIL` or `KB_SCHEMA_VIOLATION`.
#   8. Develop a detailed, logically structured outline based on the thesis and supporting KB data.
#   9. Generate a unique ID for the outline entry.
#   10. Populate the outline KB entry, including structure details and linking `related_ids`. Ensure schema compliance (V18.3).
#   11. Write the outline entry to `philosophy-knowledge-base/outlines/` using `write_to_file`. Handle potential `KB_WRITE_FAIL` or `KB_SCHEMA_VIOLATION`.
#   12. If successful, construct success output object with KB entry IDs and summary.
#   13. If any step fails, construct failure output object with appropriate error details.
#   14. Return output object to Orchestrator.

# 5.4 Knowledge Base Interaction Protocols (Strict Protocol)
kb_interaction_protocols:
  read_access:
    description: "Defines read permissions and methods for accessing the KB."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/"
      - "philosophy-knowledge-base/arguments/"
      - "philosophy-knowledge-base/relationships/"
      - "philosophy-knowledge-base/questions/" # For context
      - "philosophy-knowledge-base/references/" # For context
    methods:
      - tool: read_file # For accessing specific entries by ID (filename)
      - tool: search_files # For finding entries based on content or tags within allowed paths
    filtering: "Primarily uses specific KB entry IDs provided in `input_schema.kb_context`. May use `search_files` with `context_tags` for broader discovery within allowed paths if necessary."
  write_access:
    description: "Defines write permissions and strict requirements for modifying the KB."
    allowed_paths:
      - "philosophy-knowledge-base/theses/"
      - "philosophy-knowledge-base/outlines/"
    methods:
      - tool: write_to_file # For creating new thesis and outline entries
    schema_compliance: "**STRICT:** All writes MUST conform to the full V18.3 KB schema definitions for 'Thesis' and 'Outline' entry types. This includes mandatory population of all required fields, especially rigor fields (e.g., `thesis_justification`, `outline_structure_rationale`) and linking fields (`related_ids` pointing to concepts, arguments, etc., used in development)."
    id_generation: "Mode MUST generate unique, collision-resistant IDs for new thesis and outline entries before writing."
    error_handling: "Failures during write (e.g., `KB_WRITE_FAIL`, `KB_SCHEMA_VIOLATION`) MUST be caught, logged, and reported to the Orchestrator."
  querying:
    description: "Describes how the mode finds relevant information within the KB."
    strategy: |
      Relies primarily on the specific `concept_ids`, `argument_ids`, and
      `relationship_ids` provided by the Orchestrator via the `input_schema`.
      Uses `read_file` to fetch these specific entries. May supplement with
      `search_files` using `context_tags` if broader context is needed for
      thesis/outline development, strictly within `read_access.allowed_paths`.
  kb_doctor_interaction:
    description: "Protocol for handling suspected KB issues."
    action: "Reports potential KB inconsistencies encountered during read/write operations (e.g., schema violations detected before write, unexpected file formats) to the Orchestrator via the error reporting mechanism. Does not attempt direct repair."

# 5.5 Conceptual Determinacy (Guideline)
conceptual_determinacy:
  description: "Guidelines for ensuring clarity and precision in generated thesis and outline."
  requirements:
    clarity_focus: "Thesis statements must be clear, specific, and directly address the prompt. Outlines must exhibit a logical, hierarchical structure with clear section headings."
    term_definition: "Key philosophical terms used in the thesis MUST be grounded in corresponding KB concept entries (linked via `related_ids`). Ambiguity should be minimized."
    scope_management: "The scope of the thesis and outline should be appropriate for the prompt and supported by the available KB context."
  negative_definition: not_applicable # Focus is on positive construction
  disambiguation_protocol: required_for_thesis_terms # Ensure key terms are clearly linked to KB definitions

# 5.6 Evidence Standards (Guideline + Strict Workflow)
evidence_standards:
  description: "Standards for grounding the thesis and outline in KB evidence."
  requirements: |
    - **KB Linkage:** The generated thesis and outline entries MUST use the `related_ids` field to explicitly link to the specific KB concept, argument, and relationship entries that provide the core support and justification.
    - **Rigor Field Justification:** The mandatory rigor fields within the thesis (`thesis_justification`) and outline (`outline_structure_rationale`) entries MUST be populated with concise explanations justifying the claims made and the structural choices, referencing the linked KB evidence.
  verification_workflow:
    enabled: false # Verification is handled externally by review modes or Orchestrator based on KB links.

# 5.7 Tool Usage Restrictions (Optional - If specific tool limitations apply)
# tool_usage_restrictions:
#   allowed_tools:
#     - read_file
#     - search_files
#     - write_to_file
#     - list_files # Potentially for checking KB structure if needed
#   disallowed_tools:
#     - apply_diff # Not suitable for creating new structured entries
#     - insert_content # Not suitable for creating new structured entries
#     - execute_command
#     - etc.