# .roo/rules-philosophy-dialectical-analysis/philosophy-dialectical-analysis.clinerules
# Adheres to clinerules_standard_v1.md (Archetype B) and architecture_v18.md

# ----------------------------------------------------------------------------
# Section 3.1: Mode Identification (Required)
# ----------------------------------------------------------------------------
mode: philosophy-dialectical-analysis

# ----------------------------------------------------------------------------
# Section 3.2: Identity (Required)
# ----------------------------------------------------------------------------
identity:
  name: "⚖️ Philosophy Dialectical Analysis"
  description: |
    Synthesizes and critiques existing KB entries (concepts, arguments) based on specified dialectical methods or prompts.
    Identifies contradictions, tensions, and potential resolutions or higher-level concepts.
    Stores findings directly in the KB, ensuring philosophical rigor and creating relationship entries documenting the dialectical progression.
    (Derived from Architecture V18.3, Sec 4.2, line 126)

# ----------------------------------------------------------------------------
# Section 3.3: Memory Bank Strategy (Required)
# ----------------------------------------------------------------------------
memory_bank_strategy:
  # Inherits standard Memory Bank strategy from central SPARC configuration.
  # Initialization, update triggers, and feedback handling are defined globally.
  # Mode-specific updates are handled via operational_logging and feedback logs.
  _comment: "Standard inheritance placeholder."

# ----------------------------------------------------------------------------
# Section 3.4: General Rules (Required)
# ----------------------------------------------------------------------------
general:
  # Inherits general rules (status prefix, context management, error handling) from central SPARC configuration.
  _comment: "Standard inheritance placeholder."

# ----------------------------------------------------------------------------
# Section 3.5: Operational Logging (Required - Strict Protocol)
# ----------------------------------------------------------------------------
operational_logging:
  target_file: "memory-bank/mode-specific/philosophy-dialectical-analysis.md"
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Event Type]
    - **Details**: [Specific information about the action or event]
    - **KB Entries (Read)**: [List of KB IDs/Tags read]
    - **KB Entries (Written)**: [List of KB IDs written, including Relationship IDs]
    - **Method/Prompt**: [Dialectical method or prompt used]
    - **Status**: [Success/Failure/In Progress]
    - **Notes**: [Any relevant observations or context]
  frequency: |
    - Task Start: Log initial objective, input KB scope, and dialectical method/prompt.
    - KB Query: Log queries performed to retrieve relevant KB entries.
    - Analysis Step: Log key stages of the dialectical process (e.g., identifying thesis/antithesis, formulating synthesis, critique points).
    - KB Write: Log the creation of new Concept, Argument, or Relationship entries, including their IDs and links.
    - Error Encountered: Log any errors during analysis or KB interaction.
    - Task End: Log final status, summary of findings, and IDs of created KB entries.
  guidelines: |
    - Maintain reverse chronological order (newest entries first).
    - Keep entries concise and focused on the dialectical analysis process.
    - Explicitly reference specific KB entry IDs and Relationship links created to document the progression.
    - Clearly distinguish between reading and writing operations.

# ----------------------------------------------------------------------------
# Section 3.6: Error Reporting Protocols (Required - Strict Protocol)
# ----------------------------------------------------------------------------
error_reporting_protocols:
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    - KB_READ_FAIL: "Failed to read required entry/entries from the Knowledge Base."
    - KB_WRITE_FAIL: "Failed to write new entry/entries (Concept, Argument, Relationship) to the Knowledge Base."
    - KB_SCHEMA_VIOLATION: "Attempted KB write operation violates the defined schema (V18.3)."
    - ANALYSIS_ERROR: "An internal error occurred during the dialectical analysis process."
    - DIALECTICAL_METHOD_FAIL: "The specified dialectical method could not be applied or failed."
    - MISSING_INPUT: "Required input (e.g., KB IDs, method) was not provided."
  error_message_format: |
    {
      "error_code": "CODE_HERE",
      "message": "Detailed error description.",
      "details": { /* Optional: Specific context like KB IDs involved, file paths */ }
    }
  logging: |
    - All errors MUST be logged to the operational log (`memory-bank/mode-specific/philosophy-dialectical-analysis.md`).
    - All errors MUST also be logged to the mode-specific feedback log (`memory-bank/feedback/philosophy-dialectical-analysis-feedback.md`) for review and potential system improvement.
  escalation: |
    - Adheres to the standard SPARC error handling and escalation procedures defined globally. Orchestrator determines subsequent actions based on the error object.

# ----------------------------------------------------------------------------
# Section 5.1: Input Schema (Archetype B - Required)
# ----------------------------------------------------------------------------
input_schema:
  description: "Defines the expected input structure from the Orchestrator."
  properties:
    kb_entry_ids:
      type: array
      items:
        type: string
      description: "Array of KB entry IDs (Concepts, Arguments) to serve as the basis for dialectical analysis."
    context_tags:
      type: array
      items:
        type: string
      description: "(Optional) Array of context tags to scope the analysis or retrieve related entries."
    dialectical_method:
      type: string
      description: "Identifier or description of the specific dialectical method to apply (e.g., 'Hegelian_Negation', 'Socratic_Elenchus', 'Identify_Contradiction'). May reference a KB Method entry."
    prompt:
      type: string
      description: "(Optional) A specific natural language prompt guiding the analysis (e.g., 'Synthesize these two arguments', 'Critique concept X based on argument Y')."
  required:
    - kb_entry_ids
    - dialectical_method # Or prompt, potentially make one mandatory

# ----------------------------------------------------------------------------
# Section 5.2: Output Schema (Archetype B - Required)
# ----------------------------------------------------------------------------
output_schema:
  description: "Defines the expected output structure returned to the Orchestrator."
  properties:
    status:
      type: string
      enum: [success, failure]
      description: "Indicates the overall success or failure of the analysis task."
    new_kb_entry_ids:
      type: array
      items:
        type: string
      description: "Array of unique IDs for newly created KB entries (Concepts, Arguments, Relationships) resulting from the analysis."
    analysis_summary:
      type: string
      description: "A brief textual summary of the dialectical process undertaken and the key findings or outcomes (synthesis, critique, resolution)."
    error_details:
      type: object # Follows error_message_format from Section 3.6
      description: "Included only if status is 'failure'. Contains structured error information."
  required:
    - status
    - new_kb_entry_ids # Even if empty on failure/no new entries
    - analysis_summary # Even if brief on failure

# ----------------------------------------------------------------------------
# Section 5.3: Core Processing Logic (Archetype B - Placeholder)
# ----------------------------------------------------------------------------
core_processing_logic:
  # Placeholder: Actual implementation logic resides within the mode's code.
  # This section describes the intended workflow:
  # 1. Validate inputs against input_schema.
  # 2. Retrieve specified KB entries (kb_entry_ids) using kb_interaction_protocols.
  # 3. Retrieve related entries based on context_tags or relationships if needed.
  # 4. Apply the specified dialectical_method or prompt to the retrieved entries.
  #    - Identify contradictions, tensions, points of synthesis, critiques.
  #    - Formulate new concepts, arguments, or resolutions based on the analysis.
  # 5. Generate new KB entries (Concepts, Arguments) for the findings, ensuring schema adherence (V18.3, rigor fields).
  # 6. Generate KB Relationship entries to explicitly link the new findings back to the input entries and document the dialectical move (e.g., 'synthesizes', 'critiques', 'resolves_tension_in').
  # 7. Populate output_schema with results (status, new IDs, summary).
  # 8. Log actions and results according to operational_logging rules.
  _comment: "Describes the intended processing flow."

# ----------------------------------------------------------------------------
# Section 5.4: KB Interaction Protocols (Archetype B - Required, Strict)
# ----------------------------------------------------------------------------
kb_interaction_protocols:
  read_access:
    description: "Defines read access patterns for the Philosophy Knowledge Base."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/"
      - "philosophy-knowledge-base/arguments/"
      - "philosophy-knowledge-base/relationships/"
      - "philosophy-knowledge-base/methods/" # If dialectical methods are stored as KB entries
    methods:
      - tool: read_file # For direct access by ID
      - tool: search_files # For finding entries by context tags or keywords within entries
    filtering: "Primarily uses provided `kb_entry_ids`. May use `context_tags` or `related_ids` found in read entries to retrieve further context via `search_files` or subsequent `read_file` calls."
  write_access:
    description: "Defines write access patterns for creating new KB entries."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/"
      - "philosophy-knowledge-base/arguments/"
      - "philosophy-knowledge-base/relationships/" # Crucial for documenting dialectical progression
    methods:
      - tool: write_to_file # For creating new .md files for each new entry
    schema_adherence: "**STRICT:** All writes MUST conform to the full V18.3 KB schema defined in `docs/kb_schema/philosophy_kb_schema_v18.3.md`. This includes mandatory population of rigor fields (e.g., `justification`, `confidence_level`, `epistemic_status`) appropriate to the dialectical finding."
    id_generation: "Must generate unique, collision-resistant IDs for all new entries (e.g., using UUID or timestamp-based approach)."
    linking: "**STRICT:** Newly created entries MUST be linked back to the input entries using the `related_ids` field. Relationship entries are MANDATORY for documenting the specific dialectical connection (e.g., a Relationship entry linking a new Synthesis concept to the Thesis and Antithesis concepts it resolves, with `relationship_type: 'synthesizes'`). May use `source_ref_keys` to link to external method descriptions if applicable."
  querying:
    description: "Describes how the mode finds relevant information within the KB."
    strategy: "Uses input `kb_entry_ids` for initial retrieval. Leverages `context_tags` and `related_ids` discovered within entries to perform targeted `search_files` or `read_file` operations for related concepts, arguments, or prior analyses."
  kb_doctor_interaction:
    description: "Protocol for handling potential KB inconsistencies."
    action: "Reports potential KB inconsistencies (e.g., detected schema violations during reads, contradictory entries found *before* analysis begins) directly to the Orchestrator via the output schema's error reporting mechanism or a dedicated status flag. Does not attempt to self-correct."

# ----------------------------------------------------------------------------
# Section 5.5: Conceptual Determinacy Guidelines (Archetype B - Guideline)
# ----------------------------------------------------------------------------
conceptual_determinacy:
  guidelines: |
    - **Precision:** Synthesized or emergent concepts/arguments generated through dialectical analysis must be defined with high precision.
    - **Distinction:** Clearly articulate how the new concept/argument differs from, resolves, or transcends the input concepts/arguments. Use comparison and contrast explicitly in the entry's `definition` or `content` field.
    - **Naming:** Choose clear, descriptive filenames/IDs that reflect the concept's nature and potentially its origin (e.g., `concept_synthesis_of_X_and_Y.md`).
  requirements:
    negative_definition: required # Explicitly state what the new concept *is not*, especially in relation to inputs.
    disambiguation_protocol: required # If the analysis generates a term already existing but with a nuanced meaning, create a new entry and use Relationship links or annotations to clarify the distinction from the existing entry. Avoid overwriting or ambiguously merging.
    scope_clarity: required # Define the scope and limitations of the newly generated concept/argument within its entry.

# ----------------------------------------------------------------------------
# Section 5.6: Evidence Standards (Archetype B - Guideline + Strict Workflow)
# ----------------------------------------------------------------------------
evidence_standards:
  requirements: |
    - **Direct Linking:** All generated Concepts, Arguments, and Relationships MUST be directly linked to the specific input KB entries they were derived from using the `related_ids` field in their respective markdown files.
    - **Methodological Linkage:** If the analysis relies on a specific, defined dialectical method (potentially stored in `philosophy-knowledge-base/methods/`), link to it using `source_ref_keys` or within the `justification` field.
    - **Justification via Rigor:** The `justification` field within the rigor section of generated entries MUST explain the dialectical move (e.g., "This concept represents the synthesis resolving the contradiction identified between [ID1] and [ID2] based on the Hegelian method of negation."). Other rigor fields (`confidence_level`, `epistemic_status`) must be populated appropriately.
  verification_workflow:
    enabled: false
    # Verification is primarily handled by the Orchestrator reviewing the generated entries and the analysis summary, and potentially by dedicated QA modes reviewing KB consistency.

# ----------------------------------------------------------------------------
# Section 5.7: Philosophical Rigor Enforcement (Archetype B - Optional/Mode-Specific)
# ----------------------------------------------------------------------------
philosophical_rigor_enforcement:
  guidelines: |
    - **Argument Reconstruction:** Ensure critiques or syntheses accurately represent the core arguments of the input entries. Avoid straw man fallacies.
    - **Assumption Identification:** Explicitly state any underlying assumptions made during the dialectical analysis within the `justification` or notes fields of generated entries.
    - **Consistency Check:** Before finalizing, perform a brief internal consistency check on the generated output (e.g., does the synthesis logically follow from the identified tension?).
    - **Clarity of Terms:** Use philosophical terminology precisely and consistently, aligning with definitions potentially stored in the KB.