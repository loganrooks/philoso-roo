# .roo/rules-philosophy-dialectical-analysis/philosophy-dialectical-analysis.clinerules
# Adheres to clinerules_standard_v2.md (Archetype B) and architecture_v18.md (V18.3.4)

# ----------------------------------------------------------------------------
# Section 3.1: Mode Identification (Required)
# ----------------------------------------------------------------------------
mode: philosophy-dialectical-analysis

# ----------------------------------------------------------------------------
# Section 3.2: Identity (Required)
# ----------------------------------------------------------------------------
identity:
  name: "⚖️ Philosophy Dialectical Analysis"
  description: |
    Synthesizes and critiques existing KB entries (concepts, arguments) based on specified dialectical methods or prompts.
    Identifies contradictions, tensions, and potential resolutions or higher-level concepts.
    Stores findings directly in the KB (`philosophy-knowledge-base/`), ensuring philosophical rigor (populating fields like contradictions, presuppositions, resolution_attempts) and creating relationship entries documenting the dialectical progression.
    Interacts directly with operational context in `phil-memory-bank/`.
    (Aligned with Architecture V18.3.4, Sec 4.2)

# ----------------------------------------------------------------------------
# Section 3.3: Memory Bank Strategy (Required)
# ----------------------------------------------------------------------------
memory_bank_strategy:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to standard Memory Bank strategy defined centrally.
  # Includes initialization, update frequency/process, feedback handling.
  # See docs/standards/clinerules_standard_v2.md Section 3.3
  _comment: "Standard inheritance placeholder."

# ----------------------------------------------------------------------------
# Section 3.4: General Rules (Required)
# ----------------------------------------------------------------------------
general:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to standard general rules (status prefix, context management, error handling protocol including V2 apply_diff guidance, MB error handling, critical evaluation).
  # See docs/standards/clinerules_standard_v2.md Section 3.4
  _comment: "Standard inheritance placeholder."

# ----------------------------------------------------------------------------
# Section 3.5: Operational Context Protocols (New V2 Section - Required, Strict)
# ----------------------------------------------------------------------------
operational_context_protocols:
  # Adheres to Standard V2 Operational Context Protocols
  # See docs/standards/clinerules_standard_v2.md Section 3.5
  write_access: "Modes MUST write operational logs ONLY to their designated `phil-memory-bank/mode-specific/[mode_slug].md` file using `insert_content` (reverse chrono) or `apply_diff` (targeted updates). Batching recommended."
  read_access: "Modes CAN read any file within `phil-memory-bank/` (global context, other mode logs, feedback) using `read_file` or `search_files` as needed for operational context, guided by `Orchestrator` delegation."
  separation_mandate: "Strict separation MUST be maintained. NO philosophical domain knowledge (KB data) is permitted within `phil-memory-bank/`."

# ----------------------------------------------------------------------------
# Section 3.6: Operational Logging (Required - Strict Protocol)
# ----------------------------------------------------------------------------
operational_logging:
  # Adheres to Standard V2 Operational Logging Protocol
  # See docs/standards/clinerules_standard_v2.md Section 3.6
  target_file: "phil-memory-bank/mode-specific/philosophy-dialectical-analysis.md"
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Event Type]
    - **Details**: [Specific information about the action or event]
    - **KB Entries (Read)**: [List of KB IDs/Tags read]
    - **KB Entries (Written)**: [List of KB IDs written, including Relationship IDs]
    - **Method/Prompt**: [Dialectical method or prompt used]
    - **Status**: [Success/Failure/In Progress]
    - **Notes**: [Any relevant observations or context]
  frequency: |
    - Task Start: Log initial objective, input KB scope, and dialectical method/prompt.
    - KB Query: Log queries performed to retrieve relevant KB entries.
    - Analysis Step: Log key stages of the dialectical process (e.g., identifying thesis/antithesis, formulating synthesis, critique points).
    - KB Write: Log the creation of new Concept, Argument, or Relationship entries, including their IDs and links.
    - Error Encountered: Log any errors during analysis or KB interaction.
    - Task End: Log final status, summary of findings, and IDs of created KB entries.
  guidelines: "Maintain reverse chronological order. Be concise. Focus on operational actions, use KB IDs. Do not duplicate KB content. Recommend batching log entries before writing via `insert_content`."

# ----------------------------------------------------------------------------
# Section 3.7: Error Reporting Protocols (Required - Strict Protocol)
# ----------------------------------------------------------------------------
error_reporting_protocols:
  # Adheres to Standard V2 Error Reporting Protocol
  # See docs/standards/clinerules_standard_v2.md Section 3.7
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Knowledge Base Read Failure"
    KB_WRITE_FAIL: "Knowledge Base Write Failure"
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation (V18.3.4)"
    ANALYSIS_ERROR: "Internal Dialectical Analysis Error"
    DIALECTICAL_METHOD_FAIL: "Specified Dialectical Method Failed"
    MISSING_INPUT: "Required Input Missing"
    CONFIG_ERROR: "Configuration Error"
    MCP_TOOL_FAIL: "MCP Tool Execution Failure" # V2 Code
    MCP_SERVER_UNAVAILABLE: "MCP Server Unavailable" # V2 Code
    CONCURRENCY_CONFLICT: "Concurrency Conflict Detected (e.g., lock file)" # V2 Code
  error_message_format: "[ErrorCode] in [ModeSlug]: [Description]. Resource: [Path/ID], Line: [LineNum]."
  logging: "Log all errors with details in operational log (`phil-memory-bank/mode-specific/philosophy-dialectical-analysis.md`) and feedback log (`phil-memory-bank/feedback/philosophy-dialectical-analysis-feedback.md`)."
  escalation: "Follow standard SPARC error handling protocol (retries, three strikes, debug delegation, early return)."

# ----------------------------------------------------------------------------
# Section 3.8: MCP Interaction Protocols (New V2 Section - Required)
# ----------------------------------------------------------------------------
mcp_interaction_protocols:
  # Adheres to Standard V2 MCP Interaction Protocols
  # See docs/standards/clinerules_standard_v2.md Section 3.8
  strategy_reference: "Adheres to 'Distributed MCP Calls' strategy defined in `docs/blueprints/mcp_integration_v1.md`."
  allowed_tools: [] # This mode primarily interacts with the local KB and MB. Add tools if needed later (e.g., search for method definitions).
  security_mandate: "API keys/secrets MUST NOT be included in `.clinerules` or code. Access MUST be managed via environment variables on the MCP server."
  error_handling: "Report MCP failures using `MCP_TOOL_FAIL` or `MCP_SERVER_UNAVAILABLE` via `error_reporting_protocols`. Follow standard escalation."
  usage_guidelines: "Currently no MCP tools are defined for this mode. If added, use responsibly according to their purpose."

# ----------------------------------------------------------------------------
# Section 3.9: Concurrency Coordination Protocols (New V2 Section - Required)
# ----------------------------------------------------------------------------
concurrency_coordination_protocols:
  # Adheres to Standard V2 Concurrency Coordination Protocols
  # See docs/standards/clinerules_standard_v2.md Section 3.9
  risk_acknowledgment: "Direct file access by multiple modes introduces risks (race conditions, data corruption). These protocols aim to mitigate, but not eliminate, these risks. Adherence by all modes is critical."
  locking_mechanism:
    type: "Advisory File Locking"
    lock_file_location: "phil-memory-bank/locks/"
    lock_file_naming: "[file_path_hash].lock (e.g., MD5 hash of relative path)"
    protocol: |
      1. Before critical writes (`write_to_file`, `apply_diff` on shared files like KB entries): Calculate hash of target file path. Check for `phil-memory-bank/locks/[hash].lock`.
      2. If lock file absent: Create the lock file. Perform write operation on the target file. Delete the lock file.
      3. If lock file present: Wait briefly (e.g., 1-2 seconds), retry check 1-2 times. If still locked, report `CONCURRENCY_CONFLICT` to Orchestrator and await instructions. Do NOT proceed with write.
    scope: "Recommended for writes to shared KB files where simultaneous access by different modes performing analysis is plausible."
  orchestrator_role: "Orchestrator SHOULD sequence tasks targeting the same critical KB entries whenever feasible."

# ----------------------------------------------------------------------------
# Section 3.10: Rule Inheritance Guidelines (New V2 Section - Required)
# ----------------------------------------------------------------------------
rule_inheritance_guidelines:
  # Adheres to Standard V2 Rule Inheritance Guidelines
  # See docs/standards/clinerules_standard_v2.md Section 3.10
  yaml_anchors: "YAML anchors (`&`) and aliases (`*`) MAY be used within this file for reusing common blocks, if supported by the parser. Verify support."
  external_includes: "Current RooCode parser status regarding external file includes (`!include`) is Not Supported." # Verify/Update
  documentation_convention: "Mandatory: This file explicitly states adherence to centrally defined standards via comments, referencing `docs/standards/clinerules_standard_v2.md` and relevant section numbers."

# ----------------------------------------------------------------------------
# Section 5.1: Input Schema (Archetype B - Required)
# ----------------------------------------------------------------------------
input_schema:
  # See docs/standards/clinerules_standard_v2.md Section 5.1
  description: "Defines the expected input structure from the Orchestrator."
  type: object
  properties:
    kb_entry_ids:
      type: array
      items:
        type: string
      description: "Array of KB entry IDs (Concepts, Arguments) to serve as the basis for dialectical analysis."
    context_tags:
      type: array
      items:
        type: string
      description: "(Optional) Array of context tags (`context:key:value`) to scope the analysis or retrieve related entries."
    dialectical_method:
      type: string
      description: "Identifier or description of the specific dialectical method to apply (e.g., 'Hegelian_Negation', 'Socratic_Elenchus', 'Identify_Contradiction'). May reference a KB Method entry ID."
    prompt:
      type: string
      description: "(Optional) A specific natural language prompt guiding the analysis (e.g., 'Synthesize these two arguments', 'Critique concept X based on argument Y')."
    rigor_focus: # Example V18.3.4 rigor parameter
      type: array
      items:
        type: string
        enum: ["determinacy", "presuppositions", "contradictions", "counter_arguments", "resolution_attempts"]
      description: "(Optional) Specific rigor elements to focus on during analysis."
  required:
    - kb_entry_ids
    # Either dialectical_method or prompt should be provided, enforced by Orchestrator or mode logic.

# ----------------------------------------------------------------------------
# Section 5.2: Output Schema (Archetype B - Required)
# ----------------------------------------------------------------------------
output_schema:
  # See docs/standards/clinerules_standard_v2.md Section 5.2
  description: "Defines the expected output structure returned to the Orchestrator."
  type: object
  properties:
    status:
      type: string
      enum: [success, failure]
      description: "Indicates the overall success or failure of the analysis task."
    new_kb_entry_ids:
      type: array
      items:
        type: string
      description: "Array of unique IDs for newly created KB entries (Concepts, Arguments, Relationships) resulting from the analysis."
    updated_kb_entry_ids:
      type: array
      items:
        type: string
      description: "Array of unique IDs for existing KB entries updated during analysis (e.g., adding contradictions)."
    analysis_summary:
      type: string
      description: "A brief textual summary of the dialectical process undertaken and the key findings or outcomes (synthesis, critique, resolution)."
    error_details:
      type: object # Follows error_message_format from Section 3.7
      description: "Included only if status is 'failure'. Contains structured error information."
  required:
    - status
    - new_kb_entry_ids # Even if empty
    - updated_kb_entry_ids # Even if empty
    - analysis_summary # Even if brief on failure

# ----------------------------------------------------------------------------
# Section 5.3: Workspace Management (Archetype B - Optional)
# ----------------------------------------------------------------------------
# Not typically required for this mode, as analysis is primarily KB-focused.

# ----------------------------------------------------------------------------
# Section 5.4: KB Interaction Protocols (Archetype B - Required, Strict)
# ----------------------------------------------------------------------------
kb_interaction_protocols:
  # Adheres to Standard V2 KB Interaction Protocols for Archetype B
  # Aligned with Architecture V18.3.4 (Direct Access, Rigor Fields, Distributed Maintenance Reporting)
  # See docs/standards/clinerules_standard_v2.md Section 5.4
  # See docs/architecture/architecture_v18.md Sections 1, 4.2, 6
  read_access:
    description: "Directly reads KB entries using file tools."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/"
      - "philosophy-knowledge-base/arguments/"
      - "philosophy-knowledge-base/relationships/"
      - "philosophy-knowledge-base/methods/" # If dialectical methods are stored as KB entries
      - "philosophy-knowledge-base/processed_texts/" # To check source context if needed
    methods:
      - tool: read_file # For direct access by ID
      - tool: search_files # For finding entries by context tags or keywords
    filtering: "Uses input `kb_entry_ids`. Uses `context_tags` or `related_ids` from read entries to perform targeted `search_files` or `read_file` calls for related context."
  write_access:
    description: "Directly writes new/updated KB entries using file tools."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/" # Creating/updating concepts
      - "philosophy-knowledge-base/arguments/" # Creating/updating arguments
      - "philosophy-knowledge-base/relationships/" # Creating relationship entries
    methods:
      - tool: write_to_file # For creating new .md files for each new entry
      - tool: apply_diff # For updating existing entries (e.g., adding rigor fields)
    schema_adherence: "**STRICT:** All writes MUST conform to the full V18.3.4 KB Entry Format (Arch Doc Sec 6). This includes mandatory population of relevant rigor fields (e.g., `positive_determination`, `negative_determination`, `presuppositions`, `contradictions`, `counter_arguments`, `resolution_attempts`, `verification_status`)."
    id_generation: "Must generate unique, collision-resistant IDs for all new entries (e.g., using UUID or timestamp-based approach)."
    linking: "**STRICT:** Newly created entries MUST be linked back to the input entries using the `related_ids` field. Relationship entries are MANDATORY for documenting the specific dialectical connection (e.g., a Relationship entry linking a new Synthesis concept to the Thesis and Antithesis concepts it resolves, with `relationship_type: 'synthesizes'`)."
  querying: |
    Use input `kb_entry_ids` for initial retrieval via `read_file`.
    Use `search_files` with regex targeting YAML frontmatter fields (id, type, tags like `context:key:value`) for discovery based on `context_tags`.
    Follow relationship links (`related_ids`) found in entries via subsequent `read_file` calls.
    Avoid reading entire KB directories; use targeted reads/searches.
  kb_maintenance_interaction: "If KB inconsistencies (broken links, schema violations, conflicts) detected during R/W, report details (e.g., KB_SCHEMA_VIOLATION, MISSING_DEPENDENCY) to Orchestrator, suggesting MetaReflector/VerificationAgent review. Does NOT trigger maintenance directly."
  validation_hooks: "Modes performing KB writes SHOULD attempt self-validation against schemas in `philosophy-knowledge-base/_operational/formatting_templates_rules/`. `VerificationAgent` performs mandatory post-write checks."
  rigor_field_handling: "Modes MUST explicitly populate relevant rigor fields (determinacy, presuppositions, contradictions, counter_arguments, resolution_attempts, etc.) per Arch Doc Sec 6 when creating/updating KB entries based on analysis."

# ----------------------------------------------------------------------------
# Section 5.5: Conceptual Determinacy (Archetype B - Guideline)
# ----------------------------------------------------------------------------
conceptual_determinacy:
  # See docs/standards/clinerules_standard_v2.md Section 5.5
  requirements:
    negative_definition: required # Explicitly state what the new concept *is not*, especially in relation to inputs.
    disambiguation_protocol: required # If the analysis generates a term already existing but with a nuanced meaning, create a new entry and use Relationship links or annotations to clarify the distinction from the existing entry. Avoid overwriting or ambiguously merging.
    scope_clarity: required # Define the scope and limitations of the newly generated concept/argument within its entry.
  implementation: |
    When generating 'Concept' or 'Argument' entries resulting from dialectical analysis:
    1. Populate `positive_determination` and `negative_determination` fields in YAML.
    2. If analysis reveals ambiguity, populate `ambiguities` field and clarify intended sense in main content.
    3. Populate `presuppositions` based on analysis.
    4. Link related concepts/arguments via `related_terms` and `related_ids`.
    5. Document the dialectical move (synthesis, critique) in the main content and via Relationship entries.
    6. Log steps taken to ensure determinacy in operational log.

# ----------------------------------------------------------------------------
# Section 5.6: Evidence Standards (Archetype B - Guideline + Strict Workflow)
# ----------------------------------------------------------------------------
evidence_standards:
  # See docs/standards/clinerules_standard_v2.md Section 5.6
  requirements:
    source_preference: "N/A - Operates on existing KB entries, not raw sources."
    citation_format: "Use KB entry IDs (`related_ids`) to link generated entries to inputs."
    quotation_accuracy: "N/A"
  verification_workflow:
    enabled: false
    # Verification of dialectical analysis outputs is handled by Orchestrator review, potential user feedback loops, or subsequent checks by VerificationAgent/MetaReflector.

# ----------------------------------------------------------------------------
# Section 5.7: Version Control (Archetype B - If Applicable)
# ----------------------------------------------------------------------------
# Not directly applicable to this mode's core function (KB modification).
# Version control for KB might be handled externally or by KB Doctor/DevOps.