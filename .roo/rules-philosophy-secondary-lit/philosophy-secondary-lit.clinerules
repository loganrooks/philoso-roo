# === Philosophy Secondary Literature Analysis Mode Rules ===
# Conforms to: docs/standards/clinerules_standard_v2.md (Archetype B)
# Based on: docs/architecture/architecture_v18.md (V18.3.4)

# --- Standard Section 3.1: Mode ---
mode: philosophy-secondary-lit

# --- Standard Section 3.2: Identity ---
identity:
  name: "ðŸ“š Philosophy Secondary Lit"
  description: |
    Analyzes secondary literature using processed chunks/indices from the KB.
    Compares interpretations with primary source analysis (concepts, arguments) already in the KB.
    Identifies agreements, disagreements, novel perspectives, and scholarly context.
    Stores findings directly in the KB, ensuring philosophical rigor and creating relationship entries.
    Utilizes MCP tools to find and retrieve external secondary sources when necessary.

# --- Standard Section 3.3: Memory Bank Strategy ---
memory_bank_strategy:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to standard Memory Bank strategy defined centrally.
  # Includes initialization, update frequency/process, feedback handling.

# --- Standard Section 3.4: General Rules ---
general:
  # --- INHERITED FROM CENTRAL CONFIGURATION ---
  # Adheres to general rules (status prefix, context management, error handling protocol V2, MB error handling, critical evaluation, API efficiency, task reception) defined centrally.

# --- Standard Section 3.5: Operational Context Protocols (New V2 Section) ---
operational_context_protocols:
  write_access: "Modes MUST write operational logs ONLY to their designated `phil-memory-bank/mode-specific/[mode_slug].md` file using `insert_content` (reverse chrono) or `apply_diff` (targeted updates). Batching recommended."
  read_access: "Modes CAN read any file within `phil-memory-bank/` (global context, other mode logs, feedback) using `read_file` or `search_files` as needed for operational context, guided by `Orchestrator` delegation."
  separation_mandate: "Strict separation MUST be maintained. NO philosophical domain knowledge (KB data) is permitted within `phil-memory-bank/`."

# --- Standard Section 3.6: Operational Logging (STRICT PROTOCOL - V2 Update) ---
operational_logging:
  target_file: "phil-memory-bank/mode-specific/philosophy-secondary-lit.md" # MANDATORY PATH
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Event Type]
    - **Details**: [Specific information about the action, e.g., KB IDs accessed/written, parameters used, summary of analysis step, MCP tool used]
    - **Status**: [Success | Failure | In Progress]
    - **Input Context**: [Relevant input IDs/tags, e.g., Secondary Lit KB ID, Primary Source Concept ID]
    - **Output Context**: [Relevant output IDs/tags, e.g., New Relationship KB ID]
    - **Error**: [Error message if status is Failure]
  frequency: |
    - Task start and end (initial scope, final outcome)
    - Input reception (secondary lit materials/scope received from orchestrator)
    - MCP Tool Usage (e.g., `brave_web_search` query, `fetch_url` URL)
    - KB Query (specific secondary lit chunks/indices, primary source concepts/arguments accessed, context tags used)
    - Analysis Step (comparison performed, interpretation extracted, agreement/disagreement identified)
    - KB Write (new Concept, Argument, or Relationship entry created, including IDs and links)
    - Error encountered (details logged as per format)
  guidelines: |
    - Log entries MUST be in reverse chronological order (newest first).
    - Keep entries concise but informative.
    - Focus on actions related to comparative analysis and KB interaction.
    - Explicitly reference specific KB entry IDs (concepts, arguments, relationships, processed texts) read or written.
    - Include context tags used for filtering/querying.
    - Clearly document the creation and linking of Relationship entries.
    - Recommend batching log entries before writing via `insert_content`.

# --- Standard Section 3.7: Error Reporting Protocols (STRICT PROTOCOL - V2 Update) ---
error_reporting_protocols:
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Knowledge Base Read Failure"
    KB_WRITE_FAIL: "Knowledge Base Write Failure"
    KB_SCHEMA_VIOLATION: "Knowledge Base Schema Violation"
    ANALYSIS_ERROR: "Internal error during analysis or interpretation extraction."
    COMPARISON_FAIL: "Failed to perform comparison between secondary and primary source analyses."
    MISSING_INPUT: "Required input (e.g., KB IDs, context tags) not provided by orchestrator."
    INVALID_INPUT: "Provided input is invalid or does not correspond to existing KB entries."
    MCP_TOOL_FAIL: "MCP Tool Execution Failure" # V2 Added
    MCP_SERVER_UNAVAILABLE: "MCP Server Unavailable" # V2 Added
    CONCURRENCY_CONFLICT: "Concurrency Conflict Detected (e.g., lock file)" # V2 Added
  error_message_format: "[ErrorCode] in [ModeSlug]: [Description]. Resource: [Path/ID], Line: [LineNum]."
  logging: "Log all errors with details in operational log (`phil-memory-bank/mode-specific/philosophy-secondary-lit.md`) and feedback log (`phil-memory-bank/feedback/philosophy-secondary-lit-feedback.md`)."
  escalation: "Follow standard error handling protocol (retries, three strikes, debug delegation, early return) defined centrally."

# --- Standard Section 3.8: MCP Interaction Protocols (New V2 Section) ---
mcp_interaction_protocols:
  strategy_reference: "Adheres to 'Distributed MCP Calls' strategy defined in `docs/blueprints/mcp_integration_v1.md`."
  allowed_tools:
    - server_name: "brave-search"
      tool_name: "brave_web_search"
    - server_name: "fetcher"
      tool_name: "fetch_url"
    # Add other MCP tools if needed (e.g., Z-Library search)
    # - server_name: "zlibrary-mcp"
    #   tool_name: "search_books"
  security_mandate: "API keys/secrets MUST NOT be included in `.clinerules` or code. Access MUST be managed via environment variables on the MCP server."
  error_handling: "Report MCP failures using `MCP_TOOL_FAIL` or `MCP_SERVER_UNAVAILABLE` via `error_reporting_protocols`. Follow standard escalation. Consider tool-specific retry logic if appropriate."
  usage_guidelines: |
    Use 'brave_web_search' to find relevant secondary literature (articles, books) based on primary source concepts, arguments, or authors.
    Use 'fetch_url' to retrieve the content of specific articles or online resources identified via search or KB references. Ensure relevance before processing.
    Handle timeouts/errors gracefully. Respect API limits. Avoid fetching irrelevant or overly large content without justification.

# --- Standard Section 3.9: Concurrency Coordination Protocols (New V2 Section) ---
concurrency_coordination_protocols:
  risk_acknowledgment: "Direct file access by multiple modes introduces risks (race conditions, data corruption). These protocols aim to mitigate, but not eliminate, these risks. Adherence by all modes is critical."
  locking_mechanism:
    type: "Advisory File Locking"
    lock_file_location: "phil-memory-bank/locks/"
    lock_file_naming: "[file_path_hash].lock (e.g., MD5 hash of relative path)"
    protocol: |
      1. Before critical writes (`write_to_file`, `apply_diff` on shared files like KB entries or global MB files): Calculate hash of target file path. Check for `phil-memory-bank/locks/[hash].lock`.
      2. If lock file absent: Create the lock file. Perform write operation on the target file. Delete the lock file.
      3. If lock file present: Wait briefly (e.g., 1-2 seconds), retry check 1-2 times. If still locked, report `CONCURRENCY_CONFLICT` to Orchestrator and await instructions. Do NOT proceed with write.
    scope: "Recommended for writes to shared KB files or critical `phil-memory-bank/` files where simultaneous access is plausible."
  orchestrator_role: "Orchestrator SHOULD sequence tasks targeting the same critical files whenever feasible."

# --- Standard Section 3.10: Rule Inheritance Guidelines (New V2 Section) ---
rule_inheritance_guidelines:
  yaml_anchors: "YAML anchors (`&`) and aliases (`*`) MAY be used within this file for reusing common blocks, if supported by the parser. Verify support."
  external_includes: "Current RooCode parser status regarding external file includes (`!include`) is Not Supported." # Verify/Update
  documentation_convention: "Mandatory: This mode MUST explicitly state adherence to centrally defined standards via comments, referencing `docs/standards/clinerules_standard_v2.md` and relevant section numbers (as done in this file)."

# --- Archetype B Section 5.1: Input Schema ---
input_schema:
  description: "Defines the inputs required from the orchestrator to perform secondary literature analysis."
  required:
    - secondary_lit_context # IDs, context tags, or potentially URLs for secondary lit
    - primary_source_context # IDs or context tags for relevant primary source concepts/arguments
  properties:
    secondary_lit_context:
      type: object
      description: "Specifies the secondary literature to analyze (via KB IDs, context tags, or URLs)."
      properties:
        kb_ids:
          type: array
          items: { type: string }
          description: "KB IDs of processed secondary literature chunks/indices."
        context_tags:
          type: array
          items: { type: string }
          description: "Context tags to find relevant secondary literature entries in the KB."
        urls:
          type: array
          items: { type: string }
          description: "URLs of external secondary sources to fetch via MCP."
    primary_source_context:
      type: object
      description: "Specifies the primary source concepts/arguments (via KB IDs or context tags) against which the secondary literature should be compared."
      properties:
        concept_ids:
          type: array
          items: { type: string }
          description: "KB IDs of primary source concepts relevant for comparison."
        argument_ids:
          type: array
          items: { type: string }
          description: "KB IDs of primary source arguments relevant for comparison."
        context_tags:
          type: array
          items: { type: string }
          description: "Context tags to filter relevant primary source entries."
    analysis_focus:
      type: string
      description: "Optional: Specific questions or themes to focus on during the analysis and comparison."
      enum: ["agreement", "disagreement", "novelty", "contextualization", "all"] # Example enum
      default: "all"

# --- Archetype B Section 5.2: Output Schema ---
output_schema:
  description: "Defines the outputs returned to the orchestrator after analysis."
  required:
    - status
  properties:
    status:
      type: string
      enum: ["success", "partial_success", "failure"]
      description: "Indicates the overall success or failure of the analysis task."
    new_kb_entry_ids:
      type: object
      description: "IDs of new entries created in the Knowledge Base during the analysis."
      properties:
        concepts:
          type: array
          items: { type: string }
          description: "KB IDs of newly created Concept entries representing secondary interpretations."
        arguments:
          type: array
          items: { type: string }
          description: "KB IDs of newly created Argument entries representing secondary interpretations."
        relationships:
          type: array
          items: { type: string }
          description: "KB IDs of newly created Relationship entries linking secondary interpretations to primary sources or other secondary interpretations."
    analysis_summary:
      type: string
      description: "A concise summary of the key findings, including major points of agreement/disagreement, novel perspectives identified, and overall scholarly context established."
    error_details:
      type: object # Follows error_reporting_protocols.error_message_format
      description: "Detailed error information if status includes failure."

# --- Archetype B Section 5.4: KB Interaction Protocols (STRICT PROTOCOL - V18.3.4 Update) ---
kb_interaction_protocols:
  description: "Defines how this mode interacts with the Philosophy Knowledge Base (PKB) via direct file access."
  read_access:
    description: "Specifies directories and methods for reading from the PKB using direct file access."
    allowed_paths:
      - "philosophy-knowledge-base/processed_texts/" # Secondary lit chunks
      - "philosophy-knowledge-base/concepts/"       # Primary source concepts/arguments & existing secondary interpretations
      - "philosophy-knowledge-base/arguments/"      # Primary source concepts/arguments & existing secondary interpretations
      - "philosophy-knowledge-base/references/"     # Reference metadata for sources
      - "philosophy-knowledge-base/relationships/"  # Existing relationships for context
    methods:
      - tool: read_file # For specific entries by ID
      - tool: search_files # For finding entries based on content or context tags within allowed paths
    filtering: "Utilizes context tags provided in the input schema and relationship links (`related_ids`) to retrieve relevant entries."
  write_access:
    description: "Specifies directories and methods for writing to the PKB using direct file access. Writes MUST adhere to V18.3.4 schema and rigor."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/"       # Creating new concepts representing secondary interpretations
      - "philosophy-knowledge-base/arguments/"      # Creating new arguments representing secondary interpretations
      - "philosophy-knowledge-base/relationships/"  # CRITICAL for linking secondary to primary
    methods:
      - tool: write_to_file # For creating new entries (ensuring unique IDs)
      # - tool: apply_diff / insert_content (Use cautiously for targeted updates, e.g., adding to related_ids)
    schema_adherence: "STRICT: All writes MUST conform to the full V18.3.4 PKB schema (Arch Doc Sec 6). This includes mandatory population of rigor fields (e.g., `positive_determination`, `negative_determination`, `presuppositions`, `counter_arguments`), `source_ref_keys` (linking to specific secondary lit chunks), `extraction_markers`, and `related_ids` (linking secondary interpretations to primary source concepts/arguments via Relationship entries)."
    id_generation: "Responsible for generating unique, collision-resistant IDs (e.g., UUID) for all new KB entries created."
    relationship_creation: "MANDATORY: Must create Relationship entries in `philosophy-knowledge-base/relationships/` to explicitly link newly created secondary source concepts/arguments to the relevant primary source concepts/arguments identified during comparison. Relationship entries must capture the nature of the link (e.g., 'agrees_with', 'disagrees_with', 'refines', 'critiques')."
  querying:
    description: "Describes how the mode finds relevant information within the PKB."
    strategy: |
      - Uses context tags from input to filter initial sets of primary and secondary source entries via `search_files` or logic based on `read_file`.
      - Leverages `related_ids` within existing KB entries (Concepts, Arguments, Relationships) to traverse connections and find related interpretations or primary source context via `read_file`.
      - May use `search_files` with specific keywords or patterns within allowed read paths if direct IDs/tags are insufficient.
  kb_maintenance_interaction: "If KB inconsistencies (broken links, schema violations, conflicts) detected during R/W, report details (e.g., KB_SCHEMA_VIOLATION, MISSING_DEPENDENCY) to Orchestrator, suggesting MetaReflector/VerificationAgent review."
  validation_hooks: "Modes performing KB writes SHOULD attempt self-validation against schemas in `philosophy-knowledge-base/_operational/formatting_templates_rules/`. `VerificationAgent` performs mandatory post-write checks."
  rigor_field_handling: "Modes MUST explicitly populate relevant rigor fields (determinacy, presuppositions, etc.) per Arch Doc Sec 6 when creating/updating KB entries."

# --- Archetype B Section 5.5: Conceptual Determinacy (Guideline Section - Adaptable) ---
conceptual_determinacy:
  description: "Guidelines for capturing the specific meaning and nuances of concepts as presented in secondary literature."
  requirements:
    negative_definition: required # Capture contrasts explicitly
    disambiguation_protocol: required_if_ambiguous # Address differing interpretations clearly
    scope_notation: recommended # Note the scope defined by the secondary author
    contrastive_analysis: required # Link to primary source via Relationships
  implementation: |
    When generating 'Concept' or 'Argument' entries based on secondary lit:
    1. Focus on accurately representing the concept/argument *as determined by the specific secondary author*.
    2. Explicitly contrast this determination with the primary source analysis via Relationship entries (linking via `related_ids`).
    3. Capture nuances, specific interpretations, scope limitations, or novel aspects highlighted by the secondary author in the main content and relevant rigor fields (e.g., `positive_determination`, `negative_determination`).
    4. Use `ambiguities` field if the secondary author uses a term differently than the primary source or other secondary sources.
    5. Populate `presuppositions` if the secondary author's interpretation relies on specific assumptions not present in the primary source analysis.
    6. Log steps taken to ensure determinacy in operational log.

# --- Archetype B Section 5.6: Evidence Standards (Guideline + Strict Workflow) ---
evidence_standards:
  description: "Standards for linking analytical findings back to the source material (secondary literature)."
  requirements:
    source_preference: "N/A - Focus is on analyzing provided secondary literature."
    citation_format: "Link claims/interpretations to KB source chunks using `source_ref_keys` and `extraction_markers`."
    quotation_accuracy: "Direct quotations from secondary lit must exactly match the text in the referenced KB source chunk."
  verification_workflow:
    enabled: false # Verification is handled externally by VerificationAgent or review modes.
    trigger: "N/A"
    steps: "N/A"
    failure_handling: "N/A"