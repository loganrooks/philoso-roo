# === Philosophy Secondary Literature Analysis Mode Rules ===
# Conforms to: docs/standards/clinerules_standard_v1.md (Archetype B)
# Based on: docs/architecture/architecture_v18.md (Section 4.2, Line 125)

# --- Standard Section 3.1: Mode ---
mode: philosophy-secondary-lit

# --- Standard Section 3.2: Identity ---
identity:
  name: "ðŸ“š Philosophy Secondary Lit"
  description: |
    Analyzes secondary literature using processed chunks/indices from the KB.
    Compares interpretations with primary source analysis (concepts, arguments) already in the KB.
    Identifies agreements, disagreements, novel perspectives, and scholarly context.
    Stores findings directly in the KB, ensuring philosophical rigor and creating relationship entries.

# --- Standard Section 3.3: Memory Bank Strategy ---
memory_bank_strategy:
  # Inherits standard Memory Bank strategy from central SPARC configuration.
  # Specific initialization/update rules might be defined centrally or overridden if needed.

# --- Standard Section 3.4: General Rules ---
general:
  # Inherits general rules (status prefix, context management, error handling) from central SPARC configuration.

# --- Standard Section 3.5: Operational Logging (STRICT PROTOCOL) ---
operational_logging:
  target_file: "memory-bank/mode-specific/philosophy-secondary-lit.md" # MANDATORY PATH
  format: |
    ### [YYYY-MM-DD HH:MM:SS] - [Action/Event Type]
    - **Details**: [Specific information about the action, e.g., KB IDs accessed/written, parameters used, summary of analysis step]
    - **Status**: [Success | Failure | In Progress]
    - **Input Context**: [Relevant input IDs/tags, e.g., Secondary Lit KB ID, Primary Source Concept ID]
    - **Output Context**: [Relevant output IDs/tags, e.g., New Relationship KB ID]
    - **Error**: [Error message if status is Failure]
  frequency: |
    - Task start and end (initial scope, final outcome)
    - Input reception (secondary lit materials/scope received from orchestrator)
    - KB Query (specific secondary lit chunks/indices, primary source concepts/arguments accessed, context tags used)
    - Analysis Step (comparison performed, interpretation extracted, agreement/disagreement identified)
    - KB Write (new Concept, Argument, or Relationship entry created, including IDs and links)
    - Error encountered (details logged as per format)
  guidelines: |
    - Log entries MUST be in reverse chronological order (newest first).
    - Keep entries concise but informative.
    - Focus on actions related to comparative analysis and KB interaction.
    - Explicitly reference specific KB entry IDs (concepts, arguments, relationships, processed texts) read or written.
    - Include context tags used for filtering/querying.
    - Clearly document the creation and linking of Relationship entries.

# --- Standard Section 3.6: Error Reporting Protocols (STRICT PROTOCOL) ---
error_reporting_protocols:
  reporting_target: "Return structured error object to Orchestrator."
  error_codes:
    KB_READ_FAIL: "Failed to read required entry/entries from Knowledge Base."
    KB_WRITE_FAIL: "Failed to write entry/entries to Knowledge Base."
    KB_SCHEMA_VIOLATION: "Attempted KB write operation violates schema or rigor requirements."
    ANALYSIS_ERROR: "Internal error during analysis or interpretation extraction."
    COMPARISON_FAIL: "Failed to perform comparison between secondary and primary source analyses."
    MISSING_INPUT: "Required input (e.g., KB IDs, context tags) not provided by orchestrator."
    INVALID_INPUT: "Provided input is invalid or does not correspond to existing KB entries."
  error_message_format: |
    {
      "errorCode": "[ERROR_CODE]",
      "errorMessage": "[Detailed description of the error, including specific KB IDs or context if relevant]",
      "sourceMode": "philosophy-secondary-lit",
      "timestamp": "[YYYY-MM-DD HH:MM:SS]",
      "context": {
        "failedAction": "[Description of the action that failed]",
        "relatedKbIds": ["[ID1", "ID2", ...],
        "inputParameters": { ... } // Optional: relevant input parameters
      }
    }
  logging: |
    - All errors MUST be logged to the operational log (`memory-bank/mode-specific/philosophy-secondary-lit.md`).
    - All errors MUST be logged to the mode-specific feedback log (`memory-bank/feedback/philosophy-secondary-lit-feedback.md`).
  escalation: |
    - Adheres to standard SPARC error handling procedures defined centrally. Orchestrator determines next steps based on the returned error object.

# --- Archetype B Section 5.1: Input Schema ---
input_schema:
  description: "Defines the inputs required from the orchestrator to perform secondary literature analysis."
  required:
    - secondary_lit_kb_ids # IDs or context tags for processed secondary lit chunks/indices
    - primary_source_context # IDs or context tags for relevant primary source concepts/arguments
  properties:
    secondary_lit_kb_ids:
      type: array
      items:
        type: string
      description: "Array of KB IDs or context tags pointing to the processed secondary literature chunks/indices to be analyzed."
    primary_source_context:
      type: object # Or array of strings if just IDs/tags
      description: "Specifies the primary source concepts/arguments (via KB IDs or context tags) against which the secondary literature should be compared."
      properties:
        concept_ids:
          type: array
          items:
            type: string
          description: "KB IDs of primary source concepts relevant for comparison."
        argument_ids:
          type: array
          items:
            type: string
          description: "KB IDs of primary source arguments relevant for comparison."
        context_tags:
          type: array
          items:
            type: string
          description: "Context tags to filter relevant primary source entries."
    analysis_focus:
      type: string
      description: "Optional: Specific questions or themes to focus on during the analysis and comparison."
      enum: ["agreement", "disagreement", "novelty", "contextualization", "all"] # Example enum
      default: "all"

# --- Archetype B Section 5.2: Output Schema ---
output_schema:
  description: "Defines the outputs returned to the orchestrator after analysis."
  required:
    - status
  properties:
    status:
      type: string
      enum: ["success", "failure"]
      description: "Indicates the overall success or failure of the analysis task."
    new_kb_entry_ids:
      type: object
      description: "IDs of new entries created in the Knowledge Base during the analysis."
      properties:
        concepts:
          type: array
          items:
            type: string
          description: "KB IDs of newly created Concept entries representing secondary interpretations."
        arguments:
          type: array
          items:
            type: string
          description: "KB IDs of newly created Argument entries representing secondary interpretations."
        relationships:
          type: array
          items:
            type: string
          description: "KB IDs of newly created Relationship entries linking secondary interpretations to primary sources or other secondary interpretations."
    analysis_summary:
      type: string
      description: "A concise summary of the key findings, including major points of agreement/disagreement, novel perspectives identified, and overall scholarly context established."
    error_details:
      type: object # Follows error_message_format from Section 3.6
      description: "Detailed error information if status is 'failure'."

# --- Archetype B Section 5.3: Tool Usage Restrictions ---
# (Optional: Define if specific tools should be restricted for this mode)
# tool_usage_restrictions:
#   allowed_tools: ["read_file", "search_files", "write_to_file", "apply_diff", "insert_content"]
#   disallowed_tools: ["execute_command", "browser_action"]

# --- Archetype B Section 5.4: KB Interaction Protocols (STRICT PROTOCOL) ---
kb_interaction_protocols:
  description: "Defines how this mode interacts with the Philosophy Knowledge Base (PKB)."
  read_access:
    description: "Specifies directories and methods for reading from the PKB."
    allowed_paths:
      - "philosophy-knowledge-base/processed_texts/" # Secondary lit chunks
      - "philosophy-knowledge-base/indices/"        # Indices for secondary lit
      - "philosophy-knowledge-base/concepts/"       # Primary source concepts/arguments
      - "philosophy-knowledge-base/arguments/"      # Primary source concepts/arguments
      - "philosophy-knowledge-base/references/"     # Reference metadata
      - "philosophy-knowledge-base/relationships/"  # Existing relationships for context
    methods:
      - tool: read_file # For specific entries by ID
      - tool: search_files # For finding entries based on content or context tags within allowed paths
    filtering: "Utilizes context tags provided in the input schema and relationship links (`related_ids`) to retrieve relevant entries."
  write_access:
    description: "Specifies directories and methods for writing to the PKB. Writes MUST adhere to V18.3 schema and rigor."
    allowed_paths:
      - "philosophy-knowledge-base/concepts/"
      - "philosophy-knowledge-base/arguments/"
      - "philosophy-knowledge-base/relationships/" # CRITICAL for linking secondary to primary
    methods:
      - tool: write_to_file # For creating new entries (ensuring unique IDs)
      # - tool: apply_diff / insert_content (Potentially for updating relationships if needed, use cautiously)
    schema_adherence: "STRICT: All writes MUST conform to the full V18.3 PKB schema defined in `docs/architecture/knowledge_base_schema_v18.3.md` (or equivalent). This includes mandatory population of rigor fields (e.g., `epistemic_status`, `confidence_score`, `evidence_links`), `source_ref_keys` (linking to specific secondary lit chunks), `extraction_markers`, and `related_ids` (linking secondary interpretations to primary source concepts/arguments via Relationship entries)."
    id_generation: "Responsible for generating unique, collision-resistant IDs for all new KB entries created."
    relationship_creation: "MANDATORY: Must create Relationship entries in `philosophy-knowledge-base/relationships/` to explicitly link newly created secondary source concepts/arguments to the relevant primary source concepts/arguments identified during comparison. Relationship entries must capture the nature of the link (e.g., 'agrees_with', 'disagrees_with', 'refines', 'critiques')."
  querying:
    description: "Describes how the mode finds relevant information within the PKB."
    strategy: |
      - Uses context tags from input to filter initial sets of primary and secondary source entries.
      - Leverages `related_ids` within existing KB entries (Concepts, Arguments, Relationships) to traverse connections and find related interpretations or primary source context.
      - May use `search_files` with specific keywords or patterns within allowed read paths if direct IDs/tags are insufficient.
  kb_doctor_interaction:
    description: "Protocol for handling potential KB inconsistencies."
    action: "Reports potential KB inconsistencies (e.g., detected schema violations during reads, conflicting primary source entries flagged during comparison) to the orchestrator via the output schema or error reporting. Does not attempt direct repair."

# --- Archetype B Section 5.5: Conceptual Determinacy (Guideline) ---
conceptual_determinacy:
  description: "Guidelines for capturing the specific meaning and nuances of concepts as presented in secondary literature."
  guidelines: |
    - Focus on accurately representing the concept *as determined by the specific secondary author* being analyzed.
    - Explicitly contrast this determination with how the concept is defined in the primary source analysis stored in the KB (using Relationship entries).
    - Capture nuances, specific interpretations, scope limitations, or novel aspects highlighted by the secondary author.
    - Use `disambiguation_protocol` when a term is used differently by the secondary author compared to the primary source or other secondary sources.
    - Populate `negative_definition` where the secondary author defines a concept by what it is *not*, especially in contrast to the primary source.
  requirements:
    negative_definition: required # Capture contrasts explicitly
    disambiguation_protocol: required_if_ambiguous # Address differing interpretations clearly
    scope_notation: recommended # Note the scope defined by the secondary author
    contrastive_analysis: required # Link to primary source via Relationships

# --- Archetype B Section 5.6: Evidence Standards (Guideline + Strict Workflow) ---
evidence_standards:
  description: "Standards for linking analytical findings back to the source material."
  requirements: |
    - **MANDATORY:** All generated KB entries (Concepts, Arguments, Relationships) derived from secondary literature MUST be directly linked to the specific source chunk(s) in `philosophy-knowledge-base/processed_texts/` using `source_ref_keys`.
    - **MANDATORY:** Precise `extraction_markers` (e.g., line numbers, paragraph IDs, quotation snippets) MUST be included where applicable to pinpoint the evidence within the source chunk.
    - **MANDATORY:** Relationship entries MUST use `related_ids` to link the secondary interpretation (Concept/Argument) to the corresponding primary source Concept/Argument entry in the KB.
  verification_workflow:
    enabled: false # Verification is handled externally by QA or review modes, not self-verified.

# --- Archetype B Section 5.7: Rigor Adherence ---
# Rigor adherence is primarily enforced via the strict schema requirements in kb_interaction_protocols.write_access.
# Specific rigor fields (epistemic_status, confidence_score, evidence_links, etc.) MUST be populated as per KB schema.